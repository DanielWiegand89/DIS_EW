# Box contributions - differential cross section
# Separation into structure functions is not possible due to additional terms in y

from Counterterms import *

# Neutral Current electron - up quark
def BoxNCeu(x, Q2, Lamq, MuR2):
    BoxNCeu = ((aem**3*(-2*(8*CW2*(MZ2 + Q2)*SW2*(4*Q2*SW2**2*(-13 + Lamq*(5 - 8*SW2) + 40*SW2 -
                32*SW2**2 + LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
                Shat*(1 - 4*SW2 + 8*SW2**2 + LamE*(-1 + 4*SW2))*(9 - 24*SW2 + 32*SW2**2 +
                3*Lamq*(-3 + 8*SW2))*x) + Q2*(8*Q2*SW2**3*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 +
                Lamq*(-19 + 60*SW2 - 48*SW2**2) + LamE*(19 - 60*SW2 + 48*SW2**2 +
                Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))) +
                Shat*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 + 12*LamE*SW2**2 + 16*SW2**3)*
                (-27 + 108*SW2 - 144*SW2**2 + 128*SW2**3 + 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*x))*B0fin(-Q2, MZ2, MZ2, MuR2) +
                16*SW2**3*(4*CW2*(MZ2 + Q2)*(-13 + Lamq*(5 - 8*SW2) + 40*SW2 - 32*SW2**2 +
                LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
                Q2*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 + Lamq*(-19 + 60*SW2 - 48*SW2**2) +
                LamE*(19 - 60*SW2 + 48*SW2**2 + Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))))*
                (Q2 - Shat*x)*B0fin(Shat*x, 0, 0, MuR2) + 2*Shat*(2*CW2*(MZ2 + Q2)*SW2*(36*(-1 + LamE)*(-1 + Lamq) -
                240*(-1 + LamE)*(-1 + Lamq)*SW2 + 592*(-1 + LamE)*(-1 + Lamq)*SW2**2 -
                640*(-1 + LamE)*(-1 + Lamq)*SW2**3 + 512*(1 + LamE*Lamq)*SW2**4) +
                Q2*(27*(-1 + LamE)*(-1 + Lamq) - 270*(-1 + LamE)*(-1 + Lamq)*SW2 +
                1116*(-1 + LamE)*(-1 + Lamq)*SW2**2 - 2440*(-1 + LamE)*(-1 + Lamq)*SW2**3 +
                2976*(-1 + LamE)*(-1 + Lamq)*SW2**4 - 1920*(-1 + LamE)*(-1 + Lamq)*SW2**5 +
                1024*(1 + LamE*Lamq)*SW2**6))*x*B0fin(Q2 - Shat*x, 0, 0, MuR2) -
                16*Shat*SW2**3*(4*CW2*(MZ2 + Q2)*(-13 + Lamq*(5 - 8*SW2) + 40*SW2 - 32*SW2**2 +
                LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
                Q2*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 + Lamq*(-19 + 60*SW2 - 48*SW2**2) +
                LamE*(19 - 60*SW2 + 48*SW2**2 + Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))))*x*
                (2*MZ2 - Q2 + 2*Shat*x)*C01(Shat*x, MZ2) - 2*(8*CW2*MZ2*SW2*(9 - 60*SW2 +
                148*SW2**2 - 160*SW2**3 + 128*SW2**4 +
                Lamq*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3) +
                LamE*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 -
                160*SW2**3 + 128*SW2**4))) + Q2*(27 - 270*SW2 + 72*CW2*SW2 + 1116*SW2**2 -
                480*CW2*SW2**2 - 2440*SW2**3 + 1184*CW2*SW2**3 + 2976*SW2**4 - 1280*CW2*SW2**4 -
                1920*SW2**5 + 1024*CW2*SW2**5 + 1024*SW2**6 + Lamq*(-3 + 10*SW2)*
                (9 + 12*(-5 + 2*CW2)*SW2 + (172 - 80*CW2)*SW2**2 + 16*(-15 + 8*CW2)*SW2**3 +
                192*SW2**4) + LamE*((-3 + 10*SW2)*(9 + 12*(-5 + 2*CW2)*SW2 +
                (172 - 80*CW2)*SW2**2 + 16*(-15 + 8*CW2)*SW2**3 + 192*SW2**4) +
                Lamq*(27 + 18*(-15 + 4*CW2)*SW2 - 12*(-93 + 40*CW2)*SW2**2 +
                8*(-305 + 148*CW2)*SW2**3 - 32*(-93 + 40*CW2)*SW2**4 + 128*(-15 + 8*CW2)*
                SW2**5 + 1024*SW2**6))))*(2*MZ2 + Q2 - 2*Shat*x)*(Q2 - Shat*x)*
                C01(Q2 - Shat*x, MZ2) - 144*CW2**2*(-1 + LamE)*(-1 + Lamq)*Shat**2*
                (8*CW2*MZ2*SW2 + Q2*(3 + 2*(-5 + 4*CW2)*SW2 + 8*SW2**2))*x**2*C02(-Q2, MW2, MW2) +
                2*Q2*(16*CW2*MZ2**2*SW2*(-1 + LamE + 4*SW2 - 4*LamE*SW2 + 8*LamE*SW2**2)*
                (-9 + 24*SW2 + Lamq*(9 - 24*SW2 + 32*SW2**2)) +
                Q2*(27 - 270*SW2 + 72*CW2*SW2 + 1116*SW2**2 - 480*CW2*SW2**2 - 2720*SW2**3 +
                1600*CW2*SW2**3 + 4224*SW2**4 - 2560*CW2*SW2**4 - 3840*SW2**5 + 2048*CW2*SW2**5 +
                2048*SW2**6 + 3*Lamq*(-9 + (90 - 24*CW2)*SW2 + 4*(-93 + 40*CW2)*SW2**2 +
                (864 - 448*CW2)*SW2**3 + 128*(-9 + 4*CW2)*SW2**4 + 768*SW2**5) +
                LamE*(-27 + (270 - 72*CW2)*SW2 + 12*(-93 + 40*CW2)*SW2**2 -
                16*(-143 + 64*CW2)*SW2**3 + 64*(-39 + 16*CW2)*SW2**4 + 1536*SW2**5 +
                3*Lamq*(9 + 6*(-15 + 4*CW2)*SW2 - 4*(-93 + 40*CW2)*SW2**2 +
                16*(-45 + 16*CW2)*SW2**3 + 576*SW2**4)))*(Q2 - 2*Shat*x) +
                2*MZ2*(Q2*(27 - 270*SW2 + 108*CW2*SW2 + 1116*SW2**2 - 720*CW2*SW2**2 - 2160*SW2**3 +
                1568*CW2*SW2**3 + 1728*SW2**4 - 1280*CW2*SW2**4 + 1024*CW2*SW2**5 +
                Lamq*(-27 - 54*(-5 + 2*CW2)*SW2 + 36*(-31 + 20*CW2)*SW2**2 +
                (2288 - 1696*CW2)*SW2**3 + 64*(-39 + 28*CW2)*SW2**4 + 1536*SW2**5) +
                LamE*(-27 - 54*(-5 + 2*CW2)*SW2 + 36*(-31 + 20*CW2)*SW2**2 -
                32*(-81 + 58*CW2)*SW2**3 + 128*(-27 + 16*CW2)*SW2**4 + 2304*SW2**5 +
                Lamq*(27 + 54*(-5 + 2*CW2)*SW2 - 36*(-31 + 20*CW2)*SW2**2 +
                32*(-85 + 62*CW2)*SW2**3 - 128*(-33 + 20*CW2)*SW2**4 + 256*(-15 + 8*CW2)*
                SW2**5 + 2048*SW2**6))) - 8*CW2*Shat*SW2*(1 - 4*SW2 + 8*SW2**2 +
                LamE*(-1 + 4*SW2))*(9 - 24*SW2 + 32*SW2**2 + 3*Lamq*(-3 + 8*SW2))*x))*
                C02(-Q2, MZ2, MZ2) + 72*CW2**2*(-1 + LamE)*(-1 + Lamq)*Shat**3*
                (8*CW2*MZ2*SW2 + Q2*(3 + 2*(-5 + 4*CW2)*SW2 + 8*SW2**2))*x**3*
                D01(Shat*x, -Q2, MW2, MW2) -
                2*(8*CW2*(MZ2 + Q2)*SW2*(8*MZ2*Shat**2*SW2**2*(-13 + Lamq*(5 - 8*SW2) + 40*SW2 -
                32*SW2**2 + LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*x**2 +
                4*MZ2**2*SW2**2*(-13 + Lamq*(5 - 8*SW2) + 40*SW2 - 32*SW2**2 +
                LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*(Q2 + Shat*x) -
                Shat*x*(-2*Q2**2*SW2**2*(-13 + Lamq*(5 - 8*SW2) + 40*SW2 - 32*SW2**2 +
                LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
                4*Q2*Shat*SW2**2*(-13 + Lamq*(5 - 8*SW2) + 40*SW2 - 32*SW2**2 +
                LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*x +
                Shat**2*(1 - 4*SW2 + 8*SW2**2 + LamE*(-1 + 4*SW2))*(9 - 24*SW2 + 32*SW2**2 +
                3*Lamq*(-3 + 8*SW2))*x**2)) +
                Q2*(16*MZ2*Shat**2*SW2**3*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 +
                Lamq*(-19 + 60*SW2 - 48*SW2**2) + LamE*(19 - 60*SW2 + 48*SW2**2 +
                Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3)))*x**2 +
                8*MZ2**2*SW2**3*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 +
                Lamq*(-19 + 60*SW2 - 48*SW2**2) + LamE*(19 - 60*SW2 + 48*SW2**2 +
                Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3)))*(Q2 + Shat*x) -
                Shat*x*(-4*Q2**2*SW2**3*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 +
                Lamq*(-19 + 60*SW2 - 48*SW2**2) + LamE*(19 - 60*SW2 + 48*SW2**2 +
                Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))) +
                8*Q2*Shat*SW2**3*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 +
                Lamq*(-19 + 60*SW2 - 48*SW2**2) + LamE*(19 - 60*SW2 + 48*SW2**2 +
                Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3)))*x +
                Shat**2*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 + 12*LamE*SW2**2 + 16*SW2**3)*
                (-27 + 108*SW2 - 144*SW2**2 + 128*SW2**3 + 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*
                x**2)))*D01(Shat*x, -Q2, MZ2, MZ2) -
                (CW2*(MZ2 + Q2)*SW2*(16*MZ2**2*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4 +
                Lamq*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3) + LamE*(-9 + 60*SW2 - 148*SW2**2 +
                160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4)))*
                (2*Q2 - Shat*x) - 32*MZ2*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4 +
                Lamq*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3) + LamE*(-9 + 60*SW2 - 148*SW2**2 +
                160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4)))*
                (Q2 - Shat*x)*(-Q2 + Shat*x) - (-Q2 + Shat*x)*
                (-8*Q2**2*(-9 + 60*SW2 - 252*SW2**2 + 480*SW2**3 - 384*SW2**4 +
                Lamq*(9 - 60*SW2 + 188*SW2**2 - 224*SW2**3) + LamE*(9 - 60*SW2 + 108*SW2**2 -
                96*SW2**3 + Lamq*(-9 + 60*SW2 - 44*SW2**2 - 160*SW2**3 + 128*SW2**4))) +
                16*Q2*Shat*(-9 + 60*SW2 - 252*SW2**2 + 480*SW2**3 - 384*SW2**4 +
                Lamq*(9 - 60*SW2 + 188*SW2**2 - 224*SW2**3) + LamE*(9 - 60*SW2 + 108*SW2**2 -
                96*SW2**3 + Lamq*(-9 + 60*SW2 - 44*SW2**2 - 160*SW2**3 + 128*SW2**4)))*x +
                16*Shat**2*(1 - 4*SW2 + 8*SW2**2 + LamE*(-1 + 4*SW2))*(9 - 24*SW2 + 32*SW2**2 +
                3*Lamq*(-3 + 8*SW2))*x**2)) +
                Q2*(2*MZ2**2*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5 +
                1024*SW2**6 + Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
                1920*SW2**5) + LamE*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
                1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                1920*SW2**5 + 1024*SW2**6)))*(2*Q2 - Shat*x) -
                4*MZ2*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5 +
                1024*SW2**6 + Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
                1920*SW2**5) + LamE*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
                1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                1920*SW2**5 + 1024*SW2**6)))*(Q2 - Shat*x)*(-Q2 + Shat*x) -
                (-Q2 + Shat*x)*(Q2**2*(3*LamE*(-9 + 90*SW2 - 372*SW2**2 + 712*SW2**3 - 672*SW2**4 +
                384*SW2**5) + Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2744*SW2**3 - 3936*SW2**4 +
                2688*SW2**5) + LamE*Lamq*(27 - 270*SW2 + 1116*SW2**2 - 1880*SW2**3 +
                480*SW2**4 + 1920*SW2**5 - 1024*SW2**6) + 3*(9 - 90*SW2 + 372*SW2**2 -
                1000*SW2**3 + 1824*SW2**4 - 1920*SW2**5 + 1024*SW2**6)) +
                2*Q2*Shat*(Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2744*SW2**3 + 3936*SW2**4 -
                2688*SW2**5) - 3*LamE*(-9 + 90*SW2 - 372*SW2**2 + 712*SW2**3 - 672*SW2**4 +
                384*SW2**5) + LamE*Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 1880*SW2**3 -
                480*SW2**4 - 1920*SW2**5 + 1024*SW2**6) - 3*(9 - 90*SW2 + 372*SW2**2 -
                1000*SW2**3 + 1824*SW2**4 - 1920*SW2**5 + 1024*SW2**6))*x +
                2*Shat**2*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 + 12*LamE*SW2**2 + 16*SW2**3)*
                (-27 + 108*SW2 - 144*SW2**2 + 128*SW2**3 + 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*
                x**2)))*D01(Q2 - Shat*x, -Q2, MZ2, MZ2)))/(3456*CW2**3*Q2*(MZ2 + Q2)*Shat*SW2**3*x))

    return np.real(BoxNCeu)

# Neutral Current electron - down quark

def BoxNCed(x, Q2, Lamq, MuR2):
    BoxNCed = (aem**3*(576*CW2**2*(1 - LamE)*(1 - Lamq)*Shat*(4*CW2*MZ2*SW2 +
             Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*x*B0fin(-Q2, MW2, MW2, MuR2) +
             16*(4*CW2*(MZ2 + Q2)*SW2*(8*Q2*SW2**2*(-5 + 4*LamE*(-1 + SW2) - 4*Lamq*(-1 + SW2) +
             8*SW2 - 4*SW2**2 + LamE*Lamq*(5 - 8*SW2 + 4*SW2**2)) +
             Shat*(9 - 12*SW2 + 8*SW2**2 + 3*Lamq*(-3 + 4*SW2))*(1 - 4*SW2 + 8*SW2**2 +
             LamE*(-1 + 4*SW2))*x) + Q2*(16*Q2*SW2**3*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 +
             Lamq*(-13 + 24*SW2 - 12*SW2**2) + LamE*(13 - 24*SW2 + 12*SW2**2 +
             2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))) +
             Shat*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 + 12*LamE*SW2**2 + 16*SW2**3)*
             (-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 + 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x))*B0fin(-Q2, MZ2, MZ2, MuR2) -
             256*SW2**3*(2*CW2*(MZ2 + Q2)*(-5 + 4*LamE*(-1 + SW2) - 4*Lamq*(-1 + SW2) + 8*SW2 -
             4*SW2**2 + LamE*Lamq*(5 - 8*SW2 + 4*SW2**2)) +
             Q2*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 + Lamq*(-13 + 24*SW2 - 12*SW2**2) +
             LamE*(13 - 24*SW2 + 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))))*
             (Q2 - Shat*x)*B0fin(Shat*x, 0, 0, MuR2) -
             16*Shat*(4*CW2*(MZ2 + Q2)*SW2*(9*(1 + 4*CW2**2)*(-1 + LamE)*(-1 + Lamq) -
             48*(-1 + LamE)*(-1 + Lamq)*SW2 + 88*(-1 + LamE)*(-1 + Lamq)*SW2**2 -
             64*(-1 + LamE)*(-1 + Lamq)*SW2**3 + 32*(1 + LamE*Lamq)*SW2**4) +
             Q2*(27*(1 + 4*CW2**2)*(-1 + LamE)*(-1 + Lamq) - 72*(3 + 4*CW2**2)*(-1 + LamE)*
             (-1 + Lamq)*SW2 + 36*(19 + 4*CW2**2)*(-1 + LamE)*(-1 + Lamq)*SW2**2 -
             1088*(-1 + LamE)*(-1 + Lamq)*SW2**3 + 912*(-1 + LamE)*(-1 + Lamq)*SW2**4 -
             384*(-1 + LamE)*(-1 + Lamq)*SW2**5 + 128*(1 + LamE*Lamq)*SW2**6))*x*
             B0fin(Q2 - Shat*x, 0, 0, MuR2) + 256*Shat*SW2**3*
             (2*CW2*(MZ2 + Q2)*(-5 + 4*LamE*(-1 + SW2) - 4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 +
             LamE*Lamq*(5 - 8*SW2 + 4*SW2**2)) + Q2*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 +
             Lamq*(-13 + 24*SW2 - 12*SW2**2) + LamE*(13 - 24*SW2 + 12*SW2**2 +
             2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))))*x*(2*MZ2 - Q2 + 2*Shat*x)*
             C01(Shat*x, MZ2) + 576*CW2**2*(1 - LamE)*(1 - Lamq)*
             (4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*(2*MW2 + Q2 - 2*Shat*x)*
             (Q2 - Shat*x)*C01(Q2 - Shat*x, MW2) +
             16*(4*CW2*MZ2*SW2*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4 +
             Lamq*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3) + LamE*(-9 + 48*SW2 - 88*SW2**2 +
             64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4))) +
             Q2*(27 - 216*SW2 + 36*CW2*SW2 + 684*SW2**2 - 192*CW2*SW2**2 - 1088*SW2**3 +
             352*CW2*SW2**3 + 912*SW2**4 - 256*CW2*SW2**4 - 384*SW2**5 + 128*CW2*SW2**5 +
             128*SW2**6 + Lamq*(-3 + 8*SW2)*(9 + 12*(-4 + CW2)*SW2 - 4*(-25 + 8*CW2)*SW2**2 +
             32*(-3 + CW2)*SW2**3 + 48*SW2**4) +
             LamE*((-3 + 8*SW2)*(9 + 12*(-4 + CW2)*SW2 - 4*(-25 + 8*CW2)*SW2**2 +
             32*(-3 + CW2)*SW2**3 + 48*SW2**4) + Lamq*(27 + 36*(-6 + CW2)*SW2 +
             (684 - 192*CW2)*SW2**2 + 32*(-34 + 11*CW2)*SW2**3 + (912 - 256*CW2)*SW2**4 +
             128*(-3 + CW2)*SW2**5 + 128*SW2**6))))*(2*MZ2 + Q2 - 2*Shat*x)*(Q2 - Shat*x)*
             C01(Q2 - Shat*x, MZ2) - 576*CW2**2*(1 - LamE)*(1 - Lamq)*
             (4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*
             (2*MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2)*C02(-Q2, MW2, MW2) -
             16*Q2*(8*CW2*MZ2**2*SW2*(-1 + LamE + 4*SW2 - 4*LamE*SW2 + 8*LamE*SW2**2)*
             (-9 + 12*SW2 + Lamq*(9 - 12*SW2 + 8*SW2**2)) +
             Q2*(27 - 216*SW2 + 36*CW2*SW2 + 684*SW2**2 - 192*CW2*SW2**2 - 1312*SW2**3 +
             512*CW2*SW2**3 + 1392*SW2**4 - 512*CW2*SW2**4 - 768*SW2**5 + 256*CW2*SW2**5 +
             256*SW2**6 + 3*Lamq*(-9 - 12*(-6 + CW2)*SW2 + 4*(-57 + 16*CW2)*SW2**2 +
             (432 - 160*CW2)*SW2**3 + 16*(-27 + 8*CW2)*SW2**4 + 192*SW2**5) +
             LamE*(-27 - 36*(-6 + CW2)*SW2 + 12*(-57 + 16*CW2)*SW2**2 + (880 - 224*CW2)*SW2**3 +
             16*(-33 + 8*CW2)*SW2**4 + 192*SW2**5 + 3*Lamq*(9 + 12*(-6 + CW2)*SW2 +
             (228 - 64*CW2)*SW2**2 + 32*(-9 + 2*CW2)*SW2**3 + 144*SW2**4)))*(Q2 - 2*Shat*x) +
             2*MZ2*(Q2*(27 - 216*SW2 + 54*CW2*SW2 + 684*SW2**2 - 288*CW2*SW2**2 - 864*SW2**3 +
             448*CW2*SW2**3 + 432*SW2**4 - 256*CW2*SW2**4 + 128*CW2*SW2**5 +
             Lamq*(-27 - 54*(-4 + CW2)*SW2 + 36*(-19 + 8*CW2)*SW2**2 +
             (880 - 464*CW2)*SW2**3 + 16*(-33 + 20*CW2)*SW2**4 + 192*SW2**5) +
             LamE*(-27 - 54*(-4 + CW2)*SW2 + 36*(-19 + 8*CW2)*SW2**2 -
             16*(-81 + 37*CW2)*SW2**3 + 16*(-81 + 28*CW2)*SW2**4 + 576*SW2**5 +
             Lamq*(27 + 54*(-4 + CW2)*SW2 - 36*(-19 + 8*CW2)*SW2**2 + 32*(-41 + 19*CW2)*
             SW2**3 - 16*(-87 + 32*CW2)*SW2**4 + 256*(-3 + CW2)*SW2**5 + 256*SW2**6))) -
             4*CW2*Shat*SW2*(9 - 12*SW2 + 8*SW2**2 + 3*Lamq*(-3 + 4*SW2))*
             (1 - 4*SW2 + 8*SW2**2 + LamE*(-1 + 4*SW2))*x))*C02(-Q2, MZ2, MZ2) +
             2*(32*CW2*(MZ2 + Q2)*SW2*(16*MZ2*Shat**2*SW2**2*(-5 + 4*LamE*(-1 + SW2) -
             4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 + LamE*Lamq*(5 - 8*SW2 + 4*SW2**2))*x**2 +
             8*MZ2**2*SW2**2*(-5 + 4*LamE*(-1 + SW2) - 4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 +
             LamE*Lamq*(5 - 8*SW2 + 4*SW2**2))*(Q2 + Shat*x) -
             Shat*x*(-4*Q2**2*SW2**2*(-5 + 4*LamE*(-1 + SW2) - 4*Lamq*(-1 + SW2) + 8*SW2 -
             4*SW2**2 + LamE*Lamq*(5 - 8*SW2 + 4*SW2**2)) + 8*Q2*Shat*SW2**2*
             (-5 + 4*LamE*(-1 + SW2) - 4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 +
             LamE*Lamq*(5 - 8*SW2 + 4*SW2**2))*x + Shat**2*(9 - 12*SW2 + 8*SW2**2 +
             3*Lamq*(-3 + 4*SW2))*(1 - 4*SW2 + 8*SW2**2 + LamE*(-1 + 4*SW2))*x**2)) +
             Q2*(256*MZ2*Shat**2*SW2**3*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 +
             Lamq*(-13 + 24*SW2 - 12*SW2**2) + LamE*(13 - 24*SW2 + 12*SW2**2 +
             2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*x**2 +
             128*MZ2**2*SW2**3*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 +
             Lamq*(-13 + 24*SW2 - 12*SW2**2) + LamE*(13 - 24*SW2 + 12*SW2**2 +
             2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*(Q2 + Shat*x) +
             Shat*x*(64*Q2**2*SW2**3*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 +
             Lamq*(-13 + 24*SW2 - 12*SW2**2) + LamE*(13 - 24*SW2 + 12*SW2**2 +
             2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))) - 128*Q2*Shat*SW2**3*
             (14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 + Lamq*(-13 + 24*SW2 - 12*SW2**2) +
             LamE*(13 - 24*SW2 + 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*
             x - 8*Shat**2*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 + 12*LamE*SW2**2 +
             16*SW2**3)*(-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 + 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*
             x**2)))*D01(Shat*x, -Q2, MZ2, MZ2) + 288*CW2**2*(1 - LamE)*(1 - Lamq)*
             (4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*
             (Q2**3 - 3*Q2**2*Shat*x + 4*Q2*Shat**2*x**2 - 2*Shat**3*x**3 + MW2**2*(4*Q2 - 2*Shat*x) +
             4*MW2*(Q2 - Shat*x)**2)*D01(Q2 - Shat*x, -Q2, MW2, MW2) +
             (4*CW2*(MZ2 + Q2)*SW2*(16*MZ2**2*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4 +
             Lamq*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3) + LamE*(-9 + 48*SW2 - 88*SW2**2 +
             64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4)))*
             (2*Q2 - Shat*x) - 32*MZ2*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4 +
             Lamq*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3) + LamE*(-9 + 48*SW2 - 88*SW2**2 +
             64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4)))*(Q2 - Shat*x)*
             (-Q2 + Shat*x) - (-Q2 + Shat*x)*
             (-8*Q2**2*(Lamq*(9 - 48*SW2 + 152*SW2**2 - 128*SW2**3) -
             3*(3 - 16*SW2 + 56*SW2**2 - 64*SW2**3 + 32*SW2**4) +
             LamE*(9 - 48*SW2 + 24*SW2**2 + Lamq*(-9 + 48*SW2 - 8*SW2**2 - 64*SW2**3 + 32*
             SW2**4))) + 16*Q2*Shat*(Lamq*(9 - 48*SW2 + 152*SW2**2 - 128*SW2**3) -
             3*(3 - 16*SW2 + 56*SW2**2 - 64*SW2**3 + 32*SW2**4) +
             LamE*(9 - 48*SW2 + 24*SW2**2 + Lamq*(-9 + 48*SW2 - 8*SW2**2 - 64*SW2**3 + 32*
             SW2**4)))*x + 16*Shat**2*(9 - 12*SW2 + 8*SW2**2 + 3*Lamq*(-3 + 4*SW2))*
             (1 - 4*SW2 + 8*SW2**2 + LamE*(-1 + 4*SW2))*x**2)) +
             Q2*(16*MZ2**2*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 +
             128*SW2**6 + Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
             384*SW2**5) + LamE*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
             384*SW2**5 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
             384*SW2**5 + 128*SW2**6)))*(2*Q2 - Shat*x) -
             32*MZ2*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 +
             128*SW2**6 + Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
             384*SW2**5) + LamE*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
             384*SW2**5 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
             384*SW2**5 + 128*SW2**6)))*(Q2 - Shat*x)*(-Q2 + Shat*x) -
             (-Q2 + Shat*x)*(-8*Q2**2*(3*LamE*(9 - 72*SW2 + 228*SW2**2 - 224*SW2**3 + 48*SW2**4) +
             Lamq*(27 - 216*SW2 + 684*SW2**2 - 1504*SW2**3 + 1680*SW2**4 - 768*SW2**5) +
             LamE*Lamq*(-27 + 216*SW2 - 684*SW2**2 + 640*SW2**3 + 48*SW2**4 - 384*SW2**5 +
             128*SW2**6) - 3*(9 - 72*SW2 + 228*SW2**2 - 512*SW2**3 + 624*SW2**4 -
             384*SW2**5 + 128*SW2**6)) + 16*Q2*Shat*
             (3*LamE*(9 - 72*SW2 + 228*SW2**2 - 224*SW2**3 + 48*SW2**4) +
             Lamq*(27 - 216*SW2 + 684*SW2**2 - 1504*SW2**3 + 1680*SW2**4 - 768*SW2**5) +
             LamE*Lamq*(-27 + 216*SW2 - 684*SW2**2 + 640*SW2**3 + 48*SW2**4 - 384*SW2**5 +
             128*SW2**6) - 3*(9 - 72*SW2 + 228*SW2**2 - 512*SW2**3 + 624*SW2**4 -
             384*SW2**5 + 128*SW2**6))*x + 16*Shat**2*(-1 + LamE + 6*SW2 - 6*LamE*SW2 -
             12*SW2**2 + 12*LamE*SW2**2 + 16*SW2**3)*(-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 +
             9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x**2)))*D01(Q2 - Shat*x, -Q2, MZ2, MZ2)))/(27648*CW2**3*Q2*(MZ2
             + Q2)*Shat*SW2**3*x)

    return np.real(BoxNCed)

# Neutral Current electron - anti-up quark

def BoxNCeubar(x, Q2, Lamq, MuR2):
    BoxNCeubar = ((aem**3*(2*(64*CW2*(MZ2 + Q2)*SW2*(Q2*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 - 128*SW2**4 +
                  Lamq*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3) + LamE*(9 - 60*SW2 + 148*SW2**2 -
                  160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4))) +
                  Shat*(9 + Lamq*(9 - 24*SW2) - 24*SW2 + 32*SW2**2)*(1 - 4*SW2 + 8*SW2**2 +
                  LamE*(-1 + 4*SW2))*x) + Q2*(8*Q2*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 -
                  2976*SW2**4 + 1920*SW2**5 - 1024*SW2**6 + Lamq*(-27 + 270*SW2 - 1116*SW2**2 +
                  2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5) + LamE*(27 - 270*SW2 + 1116*SW2**2 -
                  2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 -
                  2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5 + 1024*SW2**6))) -
                  8*Shat*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 + 12*LamE*SW2**2 + 16*SW2**3)*
                  (27 - 108*SW2 + 144*SW2**2 - 128*SW2**3 + 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*x))*B0fin(-Q2, MZ2, MZ2, MuR2) +
                  16*(8*CW2*(MZ2 + Q2)*SW2*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4 +
                  Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) +
                  LamE*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 + Lamq*(-9 + 60*SW2 - 148*SW2**2 +
                  160*SW2**3 - 128*SW2**4))) + Q2*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 +
                  2976*SW2**4 - 1920*SW2**5 + 1024*SW2**6 + Lamq*(27 - 270*SW2 + 1116*SW2**2 -
                  2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5) + LamE*(-27 + 270*SW2 - 1116*SW2**2 +
                  2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5 + Lamq*(-27 + 270*SW2 - 1116*SW2**2 +
                  2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5 - 1024*SW2**6))))*(Q2 - Shat*x)*
                  B0fin(Shat*x, 0, 0, MuR2) - 128*Shat*SW2**3*
                  (4*CW2*(MZ2 + Q2)*(13 + Lamq*(5 - 8*SW2) - 40*SW2 + 32*SW2**2 +
                  LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
                  Q2*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3 + Lamq*(-19 + 60*SW2 - 48*SW2**2) +
                  LamE*(-19 + 60*SW2 - 48*SW2**2 + Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))))*x*
                  B0fin(Q2 - Shat*x, 0, 0, MuR2) +
                  16*Shat*(8*CW2*MZ2*SW2*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 - 128*SW2**4 +
                  Lamq*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3) +
                  LamE*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 -
                  160*SW2**3 + 128*SW2**4))) + Q2*(-27 + 270*SW2 - 72*CW2*SW2 - 1116*SW2**2 +
                  480*CW2*SW2**2 + 2440*SW2**3 - 1184*CW2*SW2**3 - 2976*SW2**4 + 1280*CW2*SW2**4 +
                  1920*SW2**5 - 1024*CW2*SW2**5 - 1024*SW2**6 + Lamq*(-3 + 10*SW2)*
                  (9 + 12*(-5 + 2*CW2)*SW2 + (172 - 80*CW2)*SW2**2 + 16*(-15 + 8*CW2)*SW2**3 +
                  192*SW2**4) + LamE*(-((-3 + 10*SW2)*(9 + 12*(-5 + 2*CW2)*SW2 +
                  (172 - 80*CW2)*SW2**2 + 16*(-15 + 8*CW2)*SW2**3 + 192*SW2**4)) +
                  Lamq*(27 + 18*(-15 + 4*CW2)*SW2 - 12*(-93 + 40*CW2)*SW2**2 +
                  8*(-305 + 148*CW2)*SW2**3 - 32*(-93 + 40*CW2)*SW2**4 + 128*(-15 + 8*CW2)*
                  SW2**5 + 1024*SW2**6))))*x*(2*MZ2 - Q2 + 2*Shat*x)*C01(Shat*x, MZ2) +
                  128*SW2**3*(4*CW2*(MZ2 + Q2)*(13 + Lamq*(5 - 8*SW2) - 40*SW2 + 32*SW2**2 +
                  LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
                  Q2*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3 + Lamq*(-19 + 60*SW2 - 48*SW2**2) +
                  LamE*(-19 + 60*SW2 - 48*SW2**2 + Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))))*
                  (2*MZ2 + Q2 - 2*Shat*x)*(Q2 - Shat*x)*C01(Q2 - Shat*x, MZ2) -
                  1152*CW2**2*(1 - LamE)*(1 + Lamq)*(8*CW2*MZ2*SW2 +
                  Q2*(3 + 2*(-5 + 4*CW2)*SW2 + 8*SW2**2))*(Q2 - Shat*x)**2*C02(-Q2, MW2, MW2) -
                  16*Q2*(16*CW2*MZ2**2*SW2*(-1 + LamE + 4*SW2 - 4*LamE*SW2 + 8*LamE*SW2**2)*
                  (9 - 24*SW2 + Lamq*(9 - 24*SW2 + 32*SW2**2)) -
                  Q2*(-27 + 270*SW2 - 72*CW2*SW2 - 1116*SW2**2 + 480*CW2*SW2**2 + 2720*SW2**3 -
                  1600*CW2*SW2**3 - 4224*SW2**4 + 2560*CW2*SW2**4 + 3840*SW2**5 - 2048*CW2*SW2**5 -
                  2048*SW2**6 + 3*Lamq*(-9 + (90 - 24*CW2)*SW2 + 4*(-93 + 40*CW2)*SW2**2 +
                  (864 - 448*CW2)*SW2**3 + 128*(-9 + 4*CW2)*SW2**4 + 768*SW2**5) +
                  LamE*(27 + 18*(-15 + 4*CW2)*SW2 - 12*(-93 + 40*CW2)*SW2**2 +
                  16*(-143 + 64*CW2)*SW2**3 - 64*(-39 + 16*CW2)*SW2**4 - 1536*SW2**5 +
                  3*Lamq*(9 + 6*(-15 + 4*CW2)*SW2 - 4*(-93 + 40*CW2)*SW2**2 +
                  16*(-45 + 16*CW2)*SW2**3 + 576*SW2**4)))*(Q2 - 2*Shat*x) +
                  2*MZ2*(Q2*(-27 + 270*SW2 - 36*CW2*SW2 - 1116*SW2**2 + 240*CW2*SW2**2 + 2160*SW2**3 +
                  32*CW2*SW2**3 - 1728*SW2**4 - 1280*CW2*SW2**4 + 1024*CW2*SW2**5 +
                  Lamq*(-27 + (270 - 36*CW2)*SW2 + 12*(-93 + 20*CW2)*SW2**2 -
                  176*(-13 + 2*CW2)*SW2**3 + 64*(-39 + 4*CW2)*SW2**4 + 1536*SW2**5) +
                  LamE*(27 + 18*(-15 + 2*CW2)*SW2 - 12*(-93 + 20*CW2)*SW2**2 +
                  32*(-81 + 26*CW2)*SW2**3 - 128*(-27 + 8*CW2)*SW2**4 - 2304*SW2**5 +
                  Lamq*(27 + 18*(-15 + 2*CW2)*SW2 - 12*(-93 + 20*CW2)*SW2**2 +
                  32*(-85 + 38*CW2)*SW2**3 - 128*(-33 + 20*CW2)*SW2**4 + 256*(-15 + 8*CW2)*
                  SW2**5 + 2048*SW2**6))) - 8*CW2*Shat*SW2*(9 + Lamq*(9 - 24*SW2) - 24*SW2 +
                  32*SW2**2)*(1 - 4*SW2 + 8*SW2**2 + LamE*(-1 + 4*SW2))*x))*C02(-Q2, MZ2, MZ2) -
                  (8*CW2*(MZ2 + Q2)*SW2*(32*MZ2*Shat**2*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 +
                  128*SW2**4 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) +
                  LamE*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 + Lamq*(-9 + 60*SW2 - 148*SW2**2 +
                  160*SW2**3 - 128*SW2**4)))*x**2 - 16*MZ2**2*(-9 + 60*SW2 - 148*SW2**2 +
                  160*SW2**3 - 128*SW2**4 + Lamq*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3) +
                  LamE*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 -
                  160*SW2**3 + 128*SW2**4)))*(Q2 + Shat*x) +
                  Shat*x*(-8*Q2**2*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 - 128*SW2**4 +
                  Lamq*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3) + LamE*(9 - 60*SW2 + 148*SW2**2 -
                  160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4))) -
                  16*Q2*Shat*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4 +
                  Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) + LamE*(-9 + 60*SW2 - 148*SW2**2 +
                  160*SW2**3 + Lamq*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 - 128*SW2**4)))*x +
                  16*Shat**2*(9 + Lamq*(9 - 24*SW2) - 24*SW2 + 32*SW2**2)*(1 - 4*SW2 + 8*SW2**2 +
                  LamE*(-1 + 4*SW2))*x**2)) + 8*Q2*(4*MZ2*Shat**2*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                  1920*SW2**5 + 1024*SW2**6 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 +
                  2976*SW2**4 - 1920*SW2**5) + LamE*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 -
                  2976*SW2**4 + 1920*SW2**5 + Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 -
                  2976*SW2**4 + 1920*SW2**5 - 1024*SW2**6)))*x**2 -
                  2*MZ2**2*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5 -
                  1024*SW2**6 + Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
                  1920*SW2**5) + LamE*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                  1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                  1920*SW2**5 + 1024*SW2**6)))*(Q2 + Shat*x) +
                  Shat*x*(Q2**2*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5 +
                  1024*SW2**6 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                  1920*SW2**5) + LamE*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
                  1920*SW2**5 + Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
                  1920*SW2**5 - 1024*SW2**6))) - 2*Q2*Shat*(27 - 270*SW2 + 1116*SW2**2 -
                  2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5 + 1024*SW2**6 +
                  Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5) +
                  LamE*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5 +
                  Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5 -
                  1024*SW2**6)))*x + 2*Shat**2*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 +
                  12*LamE*SW2**2 + 16*SW2**3)*(-27 + 108*SW2 - 144*SW2**2 + 128*SW2**3 -
                  9*Lamq*(3 - 12*SW2 + 16*SW2**2))*x**2)))*D01(Shat*x, -Q2, MZ2, MZ2) +
                  576*CW2**2*(1 - LamE)*(1 + Lamq)*(8*CW2*MZ2*SW2 +
                  Q2*(3 + 2*(-5 + 4*CW2)*SW2 + 8*SW2**2))*(Q2 - Shat*x)**3*D01(Q2 - Shat*x, -Q2, MW2, MW2) +
                  2*(8*CW2*(MZ2 + Q2)*SW2*(64*MZ2*SW2**2*(13 + Lamq*(5 - 8*SW2) - 40*SW2 + 32*SW2**2 +
                  LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*(Q2 - Shat*x)**2 +
                  32*MZ2**2*SW2**2*(13 + Lamq*(5 - 8*SW2) - 40*SW2 + 32*SW2**2 +
                  LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*(2*Q2 - Shat*x) +
                  (-Q2 + Shat*x)*(8*Q2**2*(Lamq*(-9 + 60*SW2 - 158*SW2**2 + 176*SW2**3) -
                  3*(3 - 20*SW2 + 58*SW2**2 - 80*SW2**3 + 64*SW2**4) +
                  LamE*(9 - 60*SW2 + 138*SW2**2 - 144*SW2**3 + Lamq*(9 - 60*SW2 + 122*SW2**2 - 80*
                  SW2**3 + 64*SW2**4))) + 16*Q2*Shat*(Lamq*(9 - 60*SW2 + 158*SW2**2 -
                  176*SW2**3) + 3*LamE*(-3 + 20*SW2 - 46*SW2**2 + 48*SW2**3) +
                  LamE*Lamq*(-9 + 60*SW2 - 122*SW2**2 + 80*SW2**3 - 64*SW2**4) +
                  3*(3 - 20*SW2 + 58*SW2**2 - 80*SW2**3 + 64*SW2**4))*x -
                  8*Shat**2*(9 + Lamq*(9 - 24*SW2) - 24*SW2 + 32*SW2**2)*(1 - 4*SW2 + 8*SW2**2 +
                  LamE*(-1 + 4*SW2))*x**2)) +
                  Q2*(128*MZ2*SW2**3*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3 +
                  Lamq*(-19 + 60*SW2 - 48*SW2**2) + LamE*(-19 + 60*SW2 - 48*SW2**2 +
                  Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3)))*(Q2 - Shat*x)**2 +
                  64*MZ2**2*SW2**3*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3 +
                  Lamq*(-19 + 60*SW2 - 48*SW2**2) + LamE*(-19 + 60*SW2 - 48*SW2**2 +
                  Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3)))*(2*Q2 - Shat*x) +
                  (-Q2 + Shat*x)*(-(Q2**2*(24*LamE*(-9 + 90*SW2 - 372*SW2**2 + 788*SW2**3 -
                  912*SW2**4 + 576*SW2**5) - 8*Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2516*SW2**3 -
                  3216*SW2**4 + 2112*SW2**5) + 24*(9 - 90*SW2 + 372*SW2**2 - 860*SW2**3 +
                  1200*SW2**4 - 960*SW2**5 + 512*SW2**6) - 8*LamE*Lamq*(27 - 270*SW2 +
                  1116*SW2**2 - 2300*SW2**3 + 2352*SW2**4 - 960*SW2**5 + 512*SW2**6))) +
                  16*Q2*Shat*(Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2516*SW2**3 + 3216*SW2**4 -
                  2112*SW2**5) + 3*LamE*(-9 + 90*SW2 - 372*SW2**2 + 788*SW2**3 - 912*SW2**4 +
                  576*SW2**5) + LamE*Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2300*SW2**3 -
                  2352*SW2**4 + 960*SW2**5 - 512*SW2**6) + 3*(9 - 90*SW2 + 372*SW2**2 -
                  860*SW2**3 + 1200*SW2**4 - 960*SW2**5 + 512*SW2**6))*x -
                  8*Shat**2*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 + 12*LamE*SW2**2 + 16*SW2**3)*
                  (-27 + 108*SW2 - 144*SW2**2 + 128*SW2**3 - 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*
                  x**2)))*D01(Q2 - Shat*x, -Q2, MZ2, MZ2)))/(27648*CW2**3*Q2*(MZ2 + Q2)*Shat*SW2**3*x))

    return np.real(BoxNCeubar)

# Neutral Current electron - anti-down quark

def BoxNCedbar(x, Q2, Lamq, MuR2):
    BoxNCedbar = (aem**3*(576*CW2**2*(1 - LamE)*(1 + Lamq)*(4*CW2*MZ2*SW2 +
                 Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*(Q2 - Shat*x)*B0fin(-Q2, MW2, MW2, MuR2)-
                 2*(32*CW2*(MZ2 + Q2)*SW2*(Q2*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 - 32*SW2**4 +
                 Lamq*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3) + LamE*(9 - 48*SW2 + 88*SW2**2 -
                 64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4))) +
                 Shat*(9 + Lamq*(9 - 12*SW2) - 12*SW2 + 8*SW2**2)*(1 - 4*SW2 + 8*SW2**2 + LamE*(-1 + 4*SW2))*x) +
                 Q2*(8*Q2*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 -
                 128*SW2**6 + Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
                 384*SW2**5) + LamE*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                 384*SW2**5 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                 384*SW2**5 + 128*SW2**6))) - 8*Shat*(-1 + LamE + 6*SW2 - 6*LamE*SW2 -
                 12*SW2**2 + 12*LamE*SW2**2 + 16*SW2**3)*(27 - 54*SW2 + 36*SW2**2 - 16*SW2**3 +
                 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x))*B0fin(-Q2, MZ2, MZ2, MuR2) -
                 16*(4*CW2*(MZ2 + Q2)*SW2*(9 + 9*Lamq - 36*CW2**2*(-1 + LamE)*(1 + Lamq) - 48*SW2 -
                 48*Lamq*SW2 + 88*SW2**2 + 88*Lamq*SW2**2 - 64*SW2**3 - 64*Lamq*SW2**3 + 32*SW2**4 +
                 LamE*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 + Lamq*(-9 + 48*SW2 - 88*SW2**2 +
                 64*SW2**3 - 32*SW2**4))) + Q2*(27 + 27*Lamq - 216*SW2 - 216*Lamq*SW2 +
                 684*SW2**2 + 684*Lamq*SW2**2 - 1088*SW2**3 - 1088*Lamq*SW2**3 + 912*SW2**4 +
                 912*Lamq*SW2**4 - 384*SW2**5 - 384*Lamq*SW2**5 + 128*SW2**6 -
                 36*CW2**2*(-1 + LamE)*(1 + Lamq)*(3 - 8*SW2 + 4*SW2**2) +
                 LamE*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 +
                 Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 -
                 128*SW2**6))))*(Q2 - Shat*x)*B0fin(Shat*x, 0, 0, MuR2) +
                 256*Shat*SW2**3*(2*CW2*(MZ2 + Q2)*(5 - 4*Lamq*(-1 + SW2) - 8*SW2 + 4*SW2**2 +
                 LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2))) +
                 Q2*(-14 + 30*SW2 - 24*SW2**2 + 8*SW2**3 + Lamq*(-13 + 24*SW2 - 12*SW2**2) +
                 LamE*(-13 + 24*SW2 - 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))))*x*
                 B0fin(Q2 - Shat*x, 0, 0, MuR2) + 576*CW2**2*(1 - LamE)*(1 + Lamq)*Shat*
                 (4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*x*(2*MW2 - Q2 + 2*Shat*x)*
                 C01(Shat*x, MW2) - 16*Shat*(4*CW2*MZ2*SW2*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 -
                 32*SW2**4 + Lamq*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3) +
                 LamE*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 +
                 32*SW2**4))) + Q2*(-27 + 216*SW2 - 36*CW2*SW2 - 684*SW2**2 + 192*CW2*SW2**2 +
                 1088*SW2**3 - 352*CW2*SW2**3 - 912*SW2**4 + 256*CW2*SW2**4 + 384*SW2**5 -
                 128*CW2*SW2**5 - 128*SW2**6 + Lamq*(-3 + 8*SW2)*(9 + 12*(-4 + CW2)*SW2 -
                 4*(-25 + 8*CW2)*SW2**2 + 32*(-3 + CW2)*SW2**3 + 48*SW2**4) +
                 LamE*(-((-3 + 8*SW2)*(9 + 12*(-4 + CW2)*SW2 - 4*(-25 + 8*CW2)*SW2**2 +
                 32*(-3 + CW2)*SW2**3 + 48*SW2**4)) + Lamq*(27 + 36*(-6 + CW2)*SW2 +
                 (684 - 192*CW2)*SW2**2 + 32*(-34 + 11*CW2)*SW2**3 + (912 - 256*CW2)*SW2**4 +
                 128*(-3 + CW2)*SW2**5 + 128*SW2**6))))*x*(2*MZ2 - Q2 + 2*Shat*x)*
                 C01(Shat*x, MZ2) - 256*SW2**3*(2*CW2*(MZ2 + Q2)*(5 - 4*Lamq*(-1 + SW2) - 8*SW2 +
                 4*SW2**2 + LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2))) +
                 Q2*(-14 + 30*SW2 - 24*SW2**2 + 8*SW2**3 + Lamq*(-13 + 24*SW2 - 12*SW2**2) +
                 LamE*(-13 + 24*SW2 - 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))))*
                 (2*MZ2 + Q2 - 2*Shat*x)*(Q2 - Shat*x)*C01(Q2 - Shat*x, MZ2) -
                 576*CW2**2*(1 - LamE)*(1 + Lamq)*(4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*
                 (2*MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2)*C02(-Q2, MW2, MW2) +
                 16*Q2*(8*CW2*MZ2**2*SW2*(-1 + LamE + 4*SW2 - 4*LamE*SW2 + 8*LamE*SW2**2)*
                 (9 - 12*SW2 + Lamq*(9 - 12*SW2 + 8*SW2**2)) -
                 Q2*(-27 + 216*SW2 - 36*CW2*SW2 - 684*SW2**2 + 192*CW2*SW2**2 + 1312*SW2**3 -
                 512*CW2*SW2**3 - 1392*SW2**4 + 512*CW2*SW2**4 + 768*SW2**5 - 256*CW2*SW2**5 -
                 256*SW2**6 + 3*Lamq*(-9 - 12*(-6 + CW2)*SW2 + 4*(-57 + 16*CW2)*SW2**2 +
                 (432 - 160*CW2)*SW2**3 + 16*(-27 + 8*CW2)*SW2**4 + 192*SW2**5) +
                 LamE*(27 + 36*(-6 + CW2)*SW2 + (684 - 192*CW2)*SW2**2 + 16*(-55 + 14*CW2)*SW2**3 -
                 16*(-33 + 8*CW2)*SW2**4 - 192*SW2**5 + 3*Lamq*(9 + 12*(-6 + CW2)*SW2 +
                 (228 - 64*CW2)*SW2**2 + 32*(-9 + 2*CW2)*SW2**3 + 144*SW2**4)))*(Q2 - 2*Shat*x) +
                 2*MZ2*(Q2*(-27 + 216*SW2 - 18*CW2*SW2 - 684*SW2**2 + 96*CW2*SW2**2 + 864*SW2**3 +
                 64*CW2*SW2**3 - 432*SW2**4 - 256*CW2*SW2**4 + 128*CW2*SW2**5 +
                 Lamq*(-27 - 18*(-12 + CW2)*SW2 + 12*(-57 + 8*CW2)*SW2**2 + 16*(55 + CW2)*SW2**3 -
                 16*(33 + 4*CW2)*SW2**4 + 192*SW2**5) + LamE*(27 + 18*(-12 + CW2)*SW2 +
                 (684 - 96*CW2)*SW2**2 + 16*(-81 + 23*CW2)*SW2**3 - 16*(-81 + 20*CW2)*SW2**4 -
                 576*SW2**5 + Lamq*(27 + 18*(-12 + CW2)*SW2 + (684 - 96*CW2)*SW2**2 +
                 32*(-41 + 13*CW2)*SW2**3 - 16*(-87 + 32*CW2)*SW2**4 + 256*(-3 + CW2)*SW2**5 +
                 256*SW2**6))) - 4*CW2*Shat*SW2*(9 + Lamq*(9 - 12*SW2) - 12*SW2 + 8*SW2**2)*
                 (1 - 4*SW2 + 8*SW2**2 + LamE*(-1 + 4*SW2))*x))*C02(-Q2, MZ2, MZ2) +
                 288*CW2**2*(1 - LamE)*(1 + Lamq)*(4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*
                 (4*MW2*Shat**2*x**2 + 2*MW2**2*(Q2 + Shat*x) +
                 Shat*x*(Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2))*D01(Shat*x, -Q2, MW2, MW2) +
                 (4*CW2*(MZ2 + Q2)*SW2*(32*MZ2*Shat**2*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4 +
                 Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) + LamE*(-9 + 48*SW2 - 88*SW2**2 +
                 64*SW2**3 + Lamq*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 - 32*SW2**4)))*x**2 -
                 16*MZ2**2*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 - 32*SW2**4 +
                 Lamq*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3) + LamE*(9 - 48*SW2 + 88*SW2**2 -
                 64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4)))*
                 (Q2 + Shat*x) + Shat*x*(-8*Q2**2*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 - 32*SW2**4 +
                 Lamq*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3) + LamE*(9 - 48*SW2 + 88*SW2**2 -
                 64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4))) -
                 16*Q2*Shat*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4 +
                 Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) + LamE*(-9 + 48*SW2 - 88*SW2**2 +
                 64*SW2**3 + Lamq*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 - 32*SW2**4)))*x +
                 16*Shat**2*(9 + Lamq*(9 - 12*SW2) - 12*SW2 + 8*SW2**2)*(1 - 4*SW2 + 8*SW2**2 +
                 LamE*(-1 + 4*SW2))*x**2)) +
                 Q2*(32*MZ2*Shat**2*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 +
                 128*SW2**6 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                 384*SW2**5) + LamE*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
                 384*SW2**5 + Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
                 384*SW2**5 - 128*SW2**6)))*x**2 - 16*MZ2**2*(-27 + 216*SW2 - 684*SW2**2 +
                 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 - 128*SW2**6 +
                 Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5) +
                 LamE*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 +
                 Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 +
                 128*SW2**6)))*(Q2 + Shat*x) +
                 Shat*x*(-8*Q2**2*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 -
                 128*SW2**6 + Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
                 384*SW2**5) + LamE*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                 384*SW2**5 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*
                 SW2**5 + 128*SW2**6))) - 16*Q2*Shat*(27 - 216*SW2 + 684*SW2**2 -
                 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 + 128*SW2**6 +
                 Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5) +
                 LamE*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 +
                 Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 - 128*
                 SW2**6)))*x + 16*Shat**2*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 +
                 12*LamE*SW2**2 + 16*SW2**3)*(-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 -
                 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x**2)))*D01(Shat*x, -Q2, MZ2, MZ2) -
                 2*(4*CW2*(MZ2 + Q2)*SW2*(128*MZ2*SW2**2*(5 - 4*Lamq*(-1 + SW2) - 8*SW2 + 4*SW2**2 +
                 LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2)))*(Q2 - Shat*x)**2 +
                 64*MZ2**2*SW2**2*(5 - 4*Lamq*(-1 + SW2) - 8*SW2 + 4*SW2**2 +
                 LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2)))*(2*Q2 - Shat*x) +
                 (-Q2 + Shat*x)*(8*Q2**2*(-9 + 48*SW2 - 108*SW2**2 + 96*SW2**3 - 48*SW2**4 +
                 Lamq*(-9 + 48*SW2 - 104*SW2**2 + 80*SW2**3) + LamE*(9 - 48*SW2 + 72*SW2**2 -
                 48*SW2**3 + Lamq*(9 - 48*SW2 + 68*SW2**2 - 32*SW2**3 + 16*SW2**4))) +
                 16*Q2*Shat*(9 - 48*SW2 + 108*SW2**2 - 96*SW2**3 + 48*SW2**4 +
                 Lamq*(9 - 48*SW2 + 104*SW2**2 - 80*SW2**3) + LamE*(-9 + 48*SW2 - 72*SW2**2 +
                 48*SW2**3 + Lamq*(-9 + 48*SW2 - 68*SW2**2 + 32*SW2**3 - 16*SW2**4)))*x -
                 8*Shat**2*(9 + Lamq*(9 - 12*SW2) - 12*SW2 + 8*SW2**2)*(1 - 4*SW2 + 8*SW2**2 +
                 LamE*(-1 + 4*SW2))*x**2)) + Q2*(256*MZ2*SW2**3*(-14 + 30*SW2 - 24*SW2**2 + 8*SW2**3 +
                 Lamq*(-13 + 24*SW2 - 12*SW2**2) + LamE*(-13 + 24*SW2 - 12*SW2**2 +
                 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*(Q2 - Shat*x)**2 +
                 128*MZ2**2*SW2**3*(-14 + 30*SW2 - 24*SW2**2 + 8*SW2**3 +
                 Lamq*(-13 + 24*SW2 - 12*SW2**2) + LamE*(-13 + 24*SW2 - 12*SW2**2 +
                 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*(2*Q2 - Shat*x) +
                 (-Q2 + Shat*x)*(8*Q2**2*(3*LamE*(9 - 72*SW2 + 228*SW2**2 - 328*SW2**3 + 240*SW2**4 -
                 96*SW2**5) + Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1192*SW2**3 - 1104*SW2**4 +
                 480*SW2**5) - 3*(9 - 72*SW2 + 228*SW2**2 - 400*SW2**3 + 384*SW2**4 -
                 192*SW2**5 + 64*SW2**6) + LamE*Lamq*(27 - 216*SW2 + 684*SW2**2 - 976*SW2**3 +
                 672*SW2**4 - 192*SW2**5 + 64*SW2**6)) + 16*Q2*Shat*
                 (Lamq*(27 - 216*SW2 + 684*SW2**2 - 1192*SW2**3 + 1104*SW2**4 - 480*SW2**5) +
                 3*LamE*(-9 + 72*SW2 - 228*SW2**2 + 328*SW2**3 - 240*SW2**4 + 96*SW2**5) +
                 LamE*Lamq*(-27 + 216*SW2 - 684*SW2**2 + 976*SW2**3 - 672*SW2**4 + 192*SW2**5 -
                 64*SW2**6) + 3*(9 - 72*SW2 + 228*SW2**2 - 400*SW2**3 + 384*SW2**4 - 192*SW2**5 +
                 64*SW2**6))*x - 8*Shat**2*(-1 + LamE + 6*SW2 - 6*LamE*SW2 - 12*SW2**2 +
                 12*LamE*SW2**2 + 16*SW2**3)*(-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 -
                 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x**2)))*D01(Q2 - Shat*x, -Q2, MZ2, MZ2))/(27648*CW2**3*Q2*(MZ2 + Q2)*Shat*SW2**3*x))

    return np.real(BoxNCedbar)

# Neutral Current positron - up quark

def BoxNCpu(x, Q2, Lamq, MuR2):
    BoxNCpu = (-(aem**3*(-((8*CW2*(MZ2 + Q2)*SW2*(4*Q2**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*LamE*SW2**2)*
              (-9 + 24*SW2 + Lamq*(9 - 24*SW2 + 32*SW2**2)) +
              4*Shat**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*(9 - 24*SW2 + 32*SW2**2 +
              3*Lamq*(-3 + 8*SW2))*x**2 - 4*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*
              (9 - 24*SW2 + 32*SW2**2 + 3*Lamq*(-3 + 8*SW2))*(Q2 - Shat*x)**2) +
              Q2*(4*Q2**2*(-1 + 6*SW2 - 12*SW2**2 + LamE*(-1 + 6*SW2 - 12*SW2**2 + 16*SW2**3))*
              (9*(3 - 12*SW2 + 16*SW2**2) + Lamq*(-27 + 108*SW2 - 144*SW2**2 + 128*SW2**3)) -
              4*Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*
              (-27 + 108*SW2 - 144*SW2**2 + 128*SW2**3 + 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*x**2 +
              4*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*
              (-27 + 108*SW2 - 144*SW2**2 + 128*SW2**3 + 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*
              (Q2 - Shat*x)**2))*B0fin(-Q2, MZ2, MZ2, MuR2)) -
              8*Q2*(8*CW2*(MZ2 + Q2)*SW2*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4 +
              Lamq*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3) +
              LamE*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + Lamq*(-9 + 60*SW2 - 148*SW2**2 +
              160*SW2**3 - 128*SW2**4))) + Q2*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 +
              2976*SW2**4 - 1920*SW2**5 + 1024*SW2**6 + Lamq*(-27 + 270*SW2 - 1116*SW2**2 +
              2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5) + LamE*(27 - 270*SW2 + 1116*SW2**2 -
              2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5 + Lamq*(-27 + 270*SW2 - 1116*SW2**2 +
              2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5 - 1024*SW2**6))))*(Q2 - Shat*x)*
              B0fin(Shat*x, 0, 0, MuR2) + 64*Q2*Shat*SW2**3*
              (4*CW2*(MZ2 + Q2)*(13 - 40*SW2 + 32*SW2**2 + Lamq*(-5 + 8*SW2) +
              LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
              Q2*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3 + Lamq*(19 - 60*SW2 + 48*SW2**2) +
              LamE*(19 - 60*SW2 + 48*SW2**2 + Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))))*x*B0fin(Q2 - Shat*x, 0, 0, MuR2) -
              8*Q2*Shat*(8*CW2*MZ2*SW2*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 - 128*SW2**4 +
              Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) + LamE*(-9 + 60*SW2 - 148*SW2**2 +
              160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4))) +
              Q2*(-27 + 270*SW2 - 72*CW2*SW2 - 1116*SW2**2 + 480*CW2*SW2**2 + 2440*SW2**3 -
              1184*CW2*SW2**3 - 2976*SW2**4 + 1280*CW2*SW2**4 + 1920*SW2**5 - 1024*CW2*SW2**5 -
              1024*SW2**6 - Lamq*(-3 + 10*SW2)*(9 + 12*(-5 + 2*CW2)*SW2 +
              (172 - 80*CW2)*SW2**2 + 16*(-15 + 8*CW2)*SW2**3 + 192*SW2**4) +
              LamE*((-3 + 10*SW2)*(9 + 12*(-5 + 2*CW2)*SW2 + (172 - 80*CW2)*SW2**2 +
              16*(-15 + 8*CW2)*SW2**3 + 192*SW2**4) + Lamq*(27 + 18*(-15 + 4*CW2)*SW2 -
              12*(-93 + 40*CW2)*SW2**2 + 8*(-305 + 148*CW2)*SW2**3 - 32*(-93 + 40*CW2)*
              SW2**4 + 128*(-15 + 8*CW2)*SW2**5 + 1024*SW2**6))))*x*(2*MZ2 - Q2 + 2*Shat*x)*
              C01(Shat*x, MZ2) - 64*Q2*SW2**3*(4*CW2*(MZ2 + Q2)*(13 - 40*SW2 + 32*SW2**2 +
              Lamq*(-5 + 8*SW2) + LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
              Q2*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3 + Lamq*(19 - 60*SW2 + 48*SW2**2) +
              LamE*(19 - 60*SW2 + 48*SW2**2 + Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))))*
              (2*MZ2 + Q2 - 2*Shat*x)*(Q2 - Shat*x)*C01(Q2 - Shat*x, MZ2) +
              576*CW2**2*(1 + LamE)*(1 - Lamq)*Q2*(8*CW2*MZ2*SW2 +
              Q2*(3 + 2*(-5 + 4*CW2)*SW2 + 8*SW2**2))*(Q2 - Shat*x)**2*C02(-Q2, MW2, MW2) +
              8*Q2**2*(16*CW2*MZ2**2*SW2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*LamE*SW2**2)*
              (-9 + 24*SW2 + Lamq*(9 - 24*SW2 + 32*SW2**2)) -
              Q2*(-27 + 270*SW2 - 72*CW2*SW2 - 1116*SW2**2 + 480*CW2*SW2**2 + 2720*SW2**3 -
              1600*CW2*SW2**3 - 4224*SW2**4 + 2560*CW2*SW2**4 + 3840*SW2**5 - 2048*CW2*SW2**5 -
              2048*SW2**6 - 3*Lamq*(-9 + (90 - 24*CW2)*SW2 + 4*(-93 + 40*CW2)*SW2**2 +
              (864 - 448*CW2)*SW2**3 + 128*(-9 + 4*CW2)*SW2**4 + 768*SW2**5) +
              LamE*(-27 + (270 - 72*CW2)*SW2 + 12*(-93 + 40*CW2)*SW2**2 -
              16*(-143 + 64*CW2)*SW2**3 + 64*(-39 + 16*CW2)*SW2**4 + 1536*SW2**5 +
              3*Lamq*(9 + 6*(-15 + 4*CW2)*SW2 - 4*(-93 + 40*CW2)*SW2**2 +
              16*(-45 + 16*CW2)*SW2**3 + 576*SW2**4)))*(Q2 - 2*Shat*x) +
              2*MZ2*(Q2*(-27 + 270*SW2 - 36*CW2*SW2 - 1116*SW2**2 + 240*CW2*SW2**2 + 2160*SW2**3 +
              32*CW2*SW2**3 - 1728*SW2**4 - 1280*CW2*SW2**4 + 1024*CW2*SW2**5 +
              Lamq*(27 + 18*(-15 + 2*CW2)*SW2 - 12*(-93 + 20*CW2)*SW2**2 +
              176*(-13 + 2*CW2)*SW2**3 - 64*(-39 + 4*CW2)*SW2**4 - 1536*SW2**5) +
              LamE*(-27 + (270 - 36*CW2)*SW2 + 12*(-93 + 20*CW2)*SW2**2 -
              32*(-81 + 26*CW2)*SW2**3 + 128*(-27 + 8*CW2)*SW2**4 + 2304*SW2**5 +
              Lamq*(27 + 18*(-15 + 2*CW2)*SW2 - 12*(-93 + 20*CW2)*SW2**2 +
              32*(-85 + 38*CW2)*SW2**3 - 128*(-33 + 20*CW2)*SW2**4 + 256*(-15 + 8*CW2)*SW2**
              5 + 2048*SW2**6))) - 8*CW2*Shat*SW2*(1 + LamE - 4*SW2 - 4*LamE*SW2 +
              8*SW2**2)*(9 - 24*SW2 + 32*SW2**2 + 3*Lamq*(-3 + 8*SW2))*x))*C02(-Q2, MZ2, MZ2) -
              4*Q2*(8*CW2*(MZ2 + Q2)*SW2*(4*MZ2*Shat**2*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 -
              128*SW2**4 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) +
              LamE*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 -
              160*SW2**3 + 128*SW2**4)))*x**2 + 2*MZ2**2*(-9 + 60*SW2 - 148*SW2**2 +
              160*SW2**3 - 128*SW2**4 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) +
              LamE*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 -
              160*SW2**3 + 128*SW2**4)))*(Q2 + Shat*x) +
              Shat*x*(Q2**2*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 - 128*SW2**4 +
              Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) + LamE*(-9 + 60*SW2 - 148*SW2**2 +
              160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4))) -
              2*Q2*Shat*(-9 + 60*SW2 - 148*SW2**2 + 160*SW2**3 - 128*SW2**4 +
              Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) + LamE*(-9 + 60*SW2 - 148*SW2**2 +
              160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4)))*x -
              2*Shat**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*(9 - 24*SW2 + 32*SW2**2 +
              3*Lamq*(-3 + 8*SW2))*x**2)) +
              Q2*(4*MZ2*Shat**2*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
              1920*SW2**5 - 1024*SW2**6 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 +
              2976*SW2**4 - 1920*SW2**5) + LamE*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 -
              2976*SW2**4 + 1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 +
              2976*SW2**4 - 1920*SW2**5 + 1024*SW2**6)))*x**2 +
              2*MZ2**2*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5 -
              1024*SW2**6 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
              1920*SW2**5) + LamE*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
              1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
              1920*SW2**5 + 1024*SW2**6)))*(Q2 + Shat*x) +
              Shat*x*(Q2**2*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
              1920*SW2**5 - 1024*SW2**6 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 +
              2976*SW2**4 - 1920*SW2**5) + LamE*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 -
              2976*SW2**4 + 1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 +
              2976*SW2**4 - 1920*SW2**5 + 1024*SW2**6))) -
              2*Q2*Shat*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 + 1920*SW2**5 -
              1024*SW2**6 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
              1920*SW2**5) + LamE*(-27 + 270*SW2 - 1116*SW2**2 + 2440*SW2**3 - 2976*SW2**4 +
              1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
              1920*SW2**5 + 1024*SW2**6)))*x + 2*Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 +
              12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*(-27 + 108*SW2 - 144*SW2**2 +
              128*SW2**3 + 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*x**2)))*
              D01(Shat*x, -Q2, MZ2, MZ2) + 288*CW2**2*(1 + LamE)*(-1 + Lamq)*Q2*
              (8*CW2*MZ2*SW2 + Q2*(3 + 2*(-5 + 4*CW2)*SW2 + 8*SW2**2))*(Q2 - Shat*x)**3*D01(Q2 - Shat*x, -Q2, MW2, MW2) -
              Q2*(8*CW2*(MZ2 + Q2)*SW2*(64*MZ2*SW2**2*(13 - 40*SW2 + 32*SW2**2 + Lamq*(-5 + 8*SW2) +
              LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*(Q2 - Shat*x)**2 +
              32*MZ2**2*SW2**2*(13 - 40*SW2 + 32*SW2**2 + Lamq*(-5 + 8*SW2) +
              LamE*(-5 + 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*(2*Q2 - Shat*x) -
              (-Q2 + Shat*x)*(-8*Q2**2*(Lamq*(9 - 60*SW2 + 158*SW2**2 - 176*SW2**3) +
              3*LamE*(-3 + 20*SW2 - 46*SW2**2 + 48*SW2**3) - 3*(3 - 20*SW2 + 58*SW2**2 -
              80*SW2**3 + 64*SW2**4) + LamE*Lamq*(9 - 60*SW2 + 122*SW2**2 - 80*SW2**3 +
              64*SW2**4)) + 16*Q2*Shat*(Lamq*(9 - 60*SW2 + 158*SW2**2 - 176*SW2**3) +
              3*LamE*(-3 + 20*SW2 - 46*SW2**2 + 48*SW2**3) - 3*(3 - 20*SW2 + 58*SW2**2 -
              80*SW2**3 + 64*SW2**4) + LamE*Lamq*(9 - 60*SW2 + 122*SW2**2 - 80*SW2**3 +
              64*SW2**4))*x + 8*Shat**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*
              (9 - 24*SW2 + 32*SW2**2 + 3*Lamq*(-3 + 8*SW2))*x**2)) +
              Q2*(64*MZ2**2*SW2**3*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3 +
              Lamq*(19 - 60*SW2 + 48*SW2**2) + LamE*(19 - 60*SW2 + 48*SW2**2 +
              Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3)))*(2*Q2 - Shat*x) +
              32*MZ2*SW2**3*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3 +
              Lamq*(19 - 60*SW2 + 48*SW2**2) + LamE*(19 - 60*SW2 + 48*SW2**2 +
              Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3)))*(-Q2 + Shat*x)*
              (-4*Q2 + 4*Shat*x) - (-Q2 + Shat*x)*
              (-8*Q2**2*(Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2516*SW2**3 + 3216*SW2**4 -
              2112*SW2**5) + 3*LamE*(-9 + 90*SW2 - 372*SW2**2 + 788*SW2**3 - 912*SW2**4 +
              576*SW2**5) - 3*(9 - 90*SW2 + 372*SW2**2 - 860*SW2**3 + 1200*SW2**4 -
              960*SW2**5 + 512*SW2**6) + LamE*Lamq*(27 - 270*SW2 + 1116*SW2**2 -
              2300*SW2**3 + 2352*SW2**4 - 960*SW2**5 + 512*SW2**6)) +
              16*Q2*Shat*(Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2516*SW2**3 + 3216*SW2**4 -
              2112*SW2**5) + 3*LamE*(-9 + 90*SW2 - 372*SW2**2 + 788*SW2**3 - 912*SW2**4 +
              576*SW2**5) - 3*(9 - 90*SW2 + 372*SW2**2 - 860*SW2**3 + 1200*SW2**4 -
              960*SW2**5 + 512*SW2**6) + LamE*Lamq*(27 - 270*SW2 + 1116*SW2**2 -
              2300*SW2**3 + 2352*SW2**4 - 960*SW2**5 + 512*SW2**6))*x -
              8*Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*
              (-27 + 108*SW2 - 144*SW2**2 + 128*SW2**3 + 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*
              x**2)))*D01(Q2 - Shat*x, -Q2, MZ2, MZ2)))/(27648*CW2**3*Q2**2*(MZ2 + Q2)*Shat*SW2**3*x))

    return np.real(BoxNCpu)

# Neutral Current positron - down quark

def BoxNCpd(x, Q2, Lamq, MuR2):
    BoxNCpd = ((aem**3*(288*CW2**2*(1 + LamE)*(1 - Lamq)*Q2*(4*CW2*MZ2*SW2 +
              Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*(Q2 - Shat*x)*B0fin(-Q2, MW2, MW2, MuR2) -
              (4*CW2*(MZ2 + Q2)*SW2*(4*Q2**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*LamE*SW2**2)*
              (-9 + 12*SW2 + Lamq*(9 - 12*SW2 + 8*SW2**2)) +
              4*Shat**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*(9 - 12*SW2 + 8*SW2**2 +
              3*Lamq*(-3 + 4*SW2))*x**2 - 4*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*
              (9 - 12*SW2 + 8*SW2**2 + 3*Lamq*(-3 + 4*SW2))*(Q2 - Shat*x)**2) +
              Q2*(4*Q2**2*(9*(3 - 6*SW2 + 4*SW2**2) + Lamq*(-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3))*
              (-1 + 6*SW2 - 12*SW2**2 + LamE*(-1 + 6*SW2 - 12*SW2**2 + 16*SW2**3)) -
              4*Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*
              (-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 + 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x**2 +
              4*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*
              (-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 + 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*
              (Q2 - Shat*x)**2))*B0fin(-Q2, MZ2, MZ2, MuR2) -
              8*Q2*(4*CW2*(MZ2 + Q2)*SW2*(9 - 36*CW2**2*(1 + LamE)*(-1 + Lamq) - 9*Lamq - 48*SW2 +
              48*Lamq*SW2 + 88*SW2**2 - 88*Lamq*SW2**2 - 64*SW2**3 + 64*Lamq*SW2**3 + 32*SW2**4 +
              LamE*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + Lamq*(-9 + 48*SW2 - 88*SW2**2 +
              64*SW2**3 - 32*SW2**4))) + Q2*(27 - 27*Lamq - 216*SW2 + 216*Lamq*SW2 +
              684*SW2**2 - 684*Lamq*SW2**2 - 1088*SW2**3 + 1088*Lamq*SW2**3 + 912*SW2**4 -
              912*Lamq*SW2**4 - 384*SW2**5 + 384*Lamq*SW2**5 + 128*SW2**6 -
              36*CW2**2*(1 + LamE)*(-1 + Lamq)*(3 - 8*SW2 + 4*SW2**2) +
              LamE*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 +
              Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 -
              128*SW2**6))))*(Q2 - Shat*x)*B0fin(Shat*x, 0, 0, MuR2) +
              128*Q2*Shat*SW2**3*(2*CW2*(MZ2 + Q2)*(5 + 4*LamE*(-1 + SW2) + 4*Lamq*(-1 + SW2) -
              8*SW2 + 4*SW2**2 + LamE*Lamq*(5 - 8*SW2 + 4*SW2**2)) +
              Q2*(-14 + 30*SW2 - 24*SW2**2 + 8*SW2**3 + Lamq*(13 - 24*SW2 + 12*SW2**2) +
              LamE*(13 - 24*SW2 + 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))))*x*
              B0fin(Q2 - Shat*x, 0, 0, MuR2) + 288*CW2**2*(1 + LamE)*(-1 + Lamq)*Q2*Shat*
              (4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*x*(-2*MW2 + Q2 - 2*Shat*x)*
              C01(Shat*x, MW2) - 8*Q2*Shat*(4*CW2*MZ2*SW2*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 -
              32*SW2**4 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) +
              LamE*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 -
              64*SW2**3 + 32*SW2**4))) + Q2*(-27 + 216*SW2 - 36*CW2*SW2 - 684*SW2**2 +
              192*CW2*SW2**2 + 1088*SW2**3 - 352*CW2*SW2**3 - 912*SW2**4 + 256*CW2*SW2**4 +
              384*SW2**5 - 128*CW2*SW2**5 - 128*SW2**6 - Lamq*(-3 + 8*SW2)*
              (9 + 12*(-4 + CW2)*SW2 - 4*(-25 + 8*CW2)*SW2**2 + 32*(-3 + CW2)*SW2**3 +
              48*SW2**4) + LamE*((-3 + 8*SW2)*(9 + 12*(-4 + CW2)*SW2 - 4*(-25 + 8*CW2)*SW2**2 +
              32*(-3 + CW2)*SW2**3 + 48*SW2**4) + Lamq*(27 + 36*(-6 + CW2)*SW2 +
              (684 - 192*CW2)*SW2**2 + 32*(-34 + 11*CW2)*SW2**3 + (912 - 256*CW2)*SW2**4 +
              128*(-3 + CW2)*SW2**5 + 128*SW2**6))))*x*(2*MZ2 - Q2 + 2*Shat*x)*
              C01(Shat*x, MZ2) - 128*Q2*SW2**3*(2*CW2*(MZ2 + Q2)*(5 + 4*LamE*(-1 + SW2) +
              4*Lamq*(-1 + SW2) - 8*SW2 + 4*SW2**2 + LamE*Lamq*(5 - 8*SW2 + 4*SW2**2)) +
              Q2*(-14 + 30*SW2 - 24*SW2**2 + 8*SW2**3 + Lamq*(13 - 24*SW2 + 12*SW2**2) +
              LamE*(13 - 24*SW2 + 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))))*
              (2*MZ2 + Q2 - 2*Shat*x)*(Q2 - Shat*x)*C01(Q2 - Shat*x, MZ2) +
              288*CW2**2*(1 + LamE)*(-1 + Lamq)*Q2*(4*CW2*MZ2*SW2 +
              Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*(2*MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2)*
              C02(-Q2, MW2, MW2) + 8*Q2**2*(8*CW2*MZ2**2*SW2*(1 + LamE - 4*SW2 - 4*LamE*SW2 +
              8*LamE*SW2**2)*(-9 + 12*SW2 + Lamq*(9 - 12*SW2 + 8*SW2**2)) -
              Q2*(-27 + 216*SW2 - 36*CW2*SW2 - 684*SW2**2 + 192*CW2*SW2**2 + 1312*SW2**3 -
              512*CW2*SW2**3 - 1392*SW2**4 + 512*CW2*SW2**4 + 768*SW2**5 - 256*CW2*SW2**5 -
              256*SW2**6 - 3*Lamq*(-9 - 12*(-6 + CW2)*SW2 + 4*(-57 + 16*CW2)*SW2**2 +
              (432 - 160*CW2)*SW2**3 + 16*(-27 + 8*CW2)*SW2**4 + 192*SW2**5) +
              LamE*(-27 - 36*(-6 + CW2)*SW2 + 12*(-57 + 16*CW2)*SW2**2 + (880 - 224*CW2)*SW2**3 +
              16*(-33 + 8*CW2)*SW2**4 + 192*SW2**5 + 3*Lamq*(9 + 12*(-6 + CW2)*SW2 +
              (228 - 64*CW2)*SW2**2 + 32*(-9 + 2*CW2)*SW2**3 + 144*SW2**4)))*(Q2 - 2*Shat*x) +
              2*MZ2*(Q2*(-27 + 216*SW2 - 18*CW2*SW2 - 684*SW2**2 + 96*CW2*SW2**2 + 864*SW2**3 +
              64*CW2*SW2**3 - 432*SW2**4 - 256*CW2*SW2**4 + 128*CW2*SW2**5 +
              Lamq*(27 + 18*(-12 + CW2)*SW2 + (684 - 96*CW2)*SW2**2 - 16*(55 + CW2)*SW2**3 +
              16*(33 + 4*CW2)*SW2**4 - 192*SW2**5) + LamE*(-27 - 18*(-12 + CW2)*SW2 +
              12*(-57 + 8*CW2)*SW2**2 - 16*(-81 + 23*CW2)*SW2**3 + 16*(-81 + 20*CW2)*SW2**4 +
              576*SW2**5 + Lamq*(27 + 18*(-12 + CW2)*SW2 + (684 - 96*CW2)*SW2**2 +
              32*(-41 + 13*CW2)*SW2**3 - 16*(-87 + 32*CW2)*SW2**4 + 256*(-3 + CW2)*SW2**5 +
              256*SW2**6))) - 4*CW2*Shat*SW2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*
              (9 - 12*SW2 + 8*SW2**2 + 3*Lamq*(-3 + 4*SW2))*x))*C02(-Q2, MZ2, MZ2) +
              144*CW2**2*(1 + LamE)*(1 - Lamq)*Q2*(4*CW2*MZ2*SW2 +
              Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*(4*MW2*Shat**2*x**2 + 2*MW2**2*(Q2 + Shat*x) +
              Shat*x*(Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2))*D01(Shat*x, -Q2, MW2, MW2) -
              2*Q2*(8*CW2*(MZ2 + Q2)*SW2*(4*MZ2*Shat**2*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 -
              32*SW2**4 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) +
              LamE*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 -
              64*SW2**3 + 32*SW2**4)))*x**2 + 2*MZ2**2*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 -
              32*SW2**4 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) +
              LamE*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 -
              64*SW2**3 + 32*SW2**4)))*(Q2 + Shat*x) +
              Shat*x*(Q2**2*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 - 32*SW2**4 +
              Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) + LamE*(-9 + 48*SW2 - 88*SW2**2 +
              64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4))) -
              2*Q2*Shat*(-9 + 48*SW2 - 88*SW2**2 + 64*SW2**3 - 32*SW2**4 +
              Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) + LamE*(-9 + 48*SW2 - 88*SW2**2 +
              64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4)))*x -
              2*Shat**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*(9 - 12*SW2 + 8*SW2**2 +
              3*Lamq*(-3 + 4*SW2))*x**2)) +
              2*Q2*(4*MZ2*Shat**2*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
              384*SW2**5 - 128*SW2**6 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 +
              912*SW2**4 - 384*SW2**5) + LamE*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 -
              912*SW2**4 + 384*SW2**5 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 +
              912*SW2**4 - 384*SW2**5 + 128*SW2**6)))*x**2 +
              2*MZ2**2*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 -
              128*SW2**6 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
              384*SW2**5) + LamE*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
              384*SW2**5 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
              384*SW2**5 + 128*SW2**6)))*(Q2 + Shat*x) +
              Shat*x*(Q2**2*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 -
              128*SW2**6 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
              384*SW2**5) + LamE*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 +
              384*SW2**5 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*
              SW2**5 + 128*SW2**6))) - 2*Q2*Shat*(-27 + 216*SW2 - 684*SW2**2 +
              1088*SW2**3 - 912*SW2**4 + 384*SW2**5 - 128*SW2**6 +
              Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5) +
              LamE*(-27 + 216*SW2 - 684*SW2**2 + 1088*SW2**3 - 912*SW2**4 + 384*SW2**5 +
              Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 + 128*
              SW2**6)))*x + 2*Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 +
              12*LamE*SW2**2 - 16*SW2**3)*(-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 +
              9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x**2)))*D01(Shat*x, -Q2, MZ2, MZ2) -
              Q2*(4*CW2*(MZ2 + Q2)*SW2*(128*MZ2*SW2**2*(5 + 4*LamE*(-1 + SW2) + 4*Lamq*(-1 + SW2) -
              8*SW2 + 4*SW2**2 + LamE*Lamq*(5 - 8*SW2 + 4*SW2**2))*(Q2 - Shat*x)**2 +
              64*MZ2**2*SW2**2*(5 + 4*LamE*(-1 + SW2) + 4*Lamq*(-1 + SW2) - 8*SW2 + 4*SW2**2 +
              LamE*Lamq*(5 - 8*SW2 + 4*SW2**2))*(2*Q2 - Shat*x) -
              (-Q2 + Shat*x)*(-8*Q2**2*(-9 + 48*SW2 - 108*SW2**2 + 96*SW2**3 - 48*SW2**4 +
              Lamq*(9 - 48*SW2 + 104*SW2**2 - 80*SW2**3) + LamE*(-9 + 48*SW2 - 72*SW2**2 +
              48*SW2**3 + Lamq*(9 - 48*SW2 + 68*SW2**2 - 32*SW2**3 + 16*SW2**4))) +
              16*Q2*Shat*(-9 + 48*SW2 - 108*SW2**2 + 96*SW2**3 - 48*SW2**4 +
              Lamq*(9 - 48*SW2 + 104*SW2**2 - 80*SW2**3) + LamE*(-9 + 48*SW2 - 72*SW2**2 +
              48*SW2**3 + Lamq*(9 - 48*SW2 + 68*SW2**2 - 32*SW2**3 + 16*SW2**4)))*x +
              8*Shat**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*(9 - 12*SW2 + 8*SW2**2 +
              3*Lamq*(-3 + 4*SW2))*x**2)) +
              Q2*(128*MZ2**2*SW2**3*(-14 + 30*SW2 - 24*SW2**2 + 8*SW2**3 +
              Lamq*(13 - 24*SW2 + 12*SW2**2) + LamE*(13 - 24*SW2 + 12*SW2**2 +
              2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*(2*Q2 - Shat*x) +
              64*MZ2*SW2**3*(-14 + 30*SW2 - 24*SW2**2 + 8*SW2**3 + Lamq*(13 - 24*SW2 + 12*SW2**2) +
              LamE*(13 - 24*SW2 + 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*
              (-Q2 + Shat*x)*(-4*Q2 + 4*Shat*x) - (-Q2 + Shat*x)*
              (-8*Q2**2*(Lamq*(27 - 216*SW2 + 684*SW2**2 - 1192*SW2**3 + 1104*SW2**4 -
              480*SW2**5) + 3*LamE*(-9 + 72*SW2 - 228*SW2**2 + 328*SW2**3 - 240*SW2**4 +
              96*SW2**5) - 3*(9 - 72*SW2 + 228*SW2**2 - 400*SW2**3 + 384*SW2**4 - 192*SW2**5 +
              64*SW2**6) + LamE*Lamq*(27 - 216*SW2 + 684*SW2**2 - 976*SW2**3 + 672*SW2**4 -
              192*SW2**5 + 64*SW2**6)) + 16*Q2*Shat*(Lamq*(27 - 216*SW2 + 684*SW2**2 -
              1192*SW2**3 + 1104*SW2**4 - 480*SW2**5) + 3*LamE*(-9 + 72*SW2 - 228*SW2**2 +
              328*SW2**3 - 240*SW2**4 + 96*SW2**5) - 3*(9 - 72*SW2 + 228*SW2**2 - 400*SW2**3 +
              384*SW2**4 - 192*SW2**5 + 64*SW2**6) + LamE*Lamq*(27 - 216*SW2 + 684*SW2**2 -
              976*SW2**3 + 672*SW2**4 - 192*SW2**5 + 64*SW2**6))*x -
              8*Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*
              (-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 + 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x**2)))*
              D01(Q2 - Shat*x, -Q2, MZ2, MZ2)))/(27648*CW2**3*Q2**2*(MZ2 + Q2)*Shat*SW2**3*x))

    return np.real(BoxNCpd)

# Neutral Current positron - anti-up quark

def BoxNCpubar(x, Q2,Lamq,MuR2):
    BoxNCpubar = (-(aem**3*(16*(8*CW2*(MZ2 + Q2)*SW2*(4*Q2*SW2**2*(-13 + 40*SW2 - 32*SW2**2 +
                 Lamq*(-5 + 8*SW2) + LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) -
                 Shat*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*(-9 + 24*SW2 - 32*SW2**2 +
                 3*Lamq*(-3 + 8*SW2))*x) +
                 Q2*(8*Q2*SW2**3*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 +
                 Lamq*(19 - 60*SW2 + 48*SW2**2) + LamE*(-19 + 60*SW2 - 48*SW2**2 +
                 Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))) +
                 Shat*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*
                 (27 - 108*SW2 + 144*SW2**2 - 128*SW2**3 + 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*x))*
                 B0fin(-Q2, MZ2, MZ2, MuR2) - 128*SW2**3*
                 (4*CW2*(MZ2 + Q2)*(-13 + 40*SW2 - 32*SW2**2 + Lamq*(-5 + 8*SW2) +
                 LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
                 Q2*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 + Lamq*(19 - 60*SW2 + 48*SW2**2) +
                 LamE*(-19 + 60*SW2 - 48*SW2**2 + Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))))*
                 (Q2 - Shat*x)*B0fin(Shat*x, 0, 0, MuR2) -
                 16*Shat*(2*CW2*(MZ2 + Q2)*SW2*(36*(1 + LamE)*(1 + Lamq) - 240*(1 + LamE)*(1 + Lamq)*
                 SW2 + 592*(1 + LamE)*(1 + Lamq)*SW2**2 - 640*(1 + LamE)*(1 + Lamq)*SW2**3 +
                 512*(1 + LamE*Lamq)*SW2**4) + Q2*(27*(1 + LamE)*(1 + Lamq) -
                 270*(1 + LamE)*(1 + Lamq)*SW2 + 1116*(1 + LamE)*(1 + Lamq)*SW2**2 -
                 2440*(1 + LamE)*(1 + Lamq)*SW2**3 + 2976*(1 + LamE)*(1 + Lamq)*SW2**4 -
                 1920*(1 + LamE)*(1 + Lamq)*SW2**5 + 1024*(1 + LamE*Lamq)*SW2**6))*x*
                 B0fin(Q2 - Shat*x, 0, 0, MuR2) + 128*Shat*SW2**3*
                 (4*CW2*(MZ2 + Q2)*(-13 + 40*SW2 - 32*SW2**2 + Lamq*(-5 + 8*SW2) +
                 LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) +
                 Q2*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 + Lamq*(19 - 60*SW2 + 48*SW2**2) +
                 LamE*(-19 + 60*SW2 - 48*SW2**2 + Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))))*
                 x*(2*MZ2 - Q2 + 2*Shat*x)*C01(Shat*x, MZ2) +
                 16*(8*CW2*MZ2*SW2*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4 +
                 Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) + LamE*(9 - 60*SW2 + 148*SW2**2 -
                 160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4))) +
                 Q2*(27 - 270*SW2 + 72*CW2*SW2 + 1116*SW2**2 - 480*CW2*SW2**2 - 2440*SW2**3 +
                 1184*CW2*SW2**3 + 2976*SW2**4 - 1280*CW2*SW2**4 - 1920*SW2**5 + 1024*CW2*SW2**5 +
                 1024*SW2**6 - Lamq*(-3 + 10*SW2)*(9 + 12*(-5 + 2*CW2)*SW2 +
                 (172 - 80*CW2)*SW2**2 + 16*(-15 + 8*CW2)*SW2**3 + 192*SW2**4) +
                 LamE*(-((-3 + 10*SW2)*(9 + 12*(-5 + 2*CW2)*SW2 + (172 - 80*CW2)*SW2**2 +
                 16*(-15 + 8*CW2)*SW2**3 + 192*SW2**4)) + Lamq*(27 + 18*(-15 + 4*CW2)*SW2 -
                 12*(-93 + 40*CW2)*SW2**2 + 8*(-305 + 148*CW2)*SW2**3 - 32*(-93 + 40*CW2)*
                 SW2**4 + 128*(-15 + 8*CW2)*SW2**5 + 1024*SW2**6))))*(2*MZ2 + Q2 - 2*Shat*x)*
                 (Q2 - Shat*x)*C01(Q2 - Shat*x, MZ2) + 1152*CW2**2*(1 + LamE)*(1 + Lamq)*Shat**2*
                 (8*CW2*MZ2*SW2 + Q2*(3 + 2*(-5 + 4*CW2)*SW2 + 8*SW2**2))*x**2*C02(-Q2, MW2, MW2) -
                 16*Q2*(16*CW2*MZ2**2*SW2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*LamE*SW2**2)*
                 (9 - 24*SW2 + Lamq*(9 - 24*SW2 + 32*SW2**2)) +
                 Q2*(27 - 270*SW2 + 72*CW2*SW2 + 1116*SW2**2 - 480*CW2*SW2**2 - 2720*SW2**3 +
                 1600*CW2*SW2**3 + 4224*SW2**4 - 2560*CW2*SW2**4 - 3840*SW2**5 + 2048*CW2*SW2**5 +
                 2048*SW2**6 - 3*Lamq*(-9 + (90 - 24*CW2)*SW2 + 4*(-93 + 40*CW2)*SW2**2 +
                 (864 - 448*CW2)*SW2**3 + 128*(-9 + 4*CW2)*SW2**4 + 768*SW2**5) +
                 LamE*(27 + 18*(-15 + 4*CW2)*SW2 - 12*(-93 + 40*CW2)*SW2**2 +
                 16*(-143 + 64*CW2)*SW2**3 - 64*(-39 + 16*CW2)*SW2**4 - 1536*SW2**5 +
                 3*Lamq*(9 + 6*(-15 + 4*CW2)*SW2 - 4*(-93 + 40*CW2)*SW2**2 +
                 16*(-45 + 16*CW2)*SW2**3 + 576*SW2**4)))*(Q2 - 2*Shat*x) +
                 2*MZ2*(Q2*(27 - 270*SW2 + 108*CW2*SW2 + 1116*SW2**2 - 720*CW2*SW2**2 - 2160*SW2**3 +
                 1568*CW2*SW2**3 + 1728*SW2**4 - 1280*CW2*SW2**4 + 1024*CW2*SW2**5 +
                 Lamq*(27 + 54*(-5 + 2*CW2)*SW2 - 36*(-31 + 20*CW2)*SW2**2 +
                 16*(-143 + 106*CW2)*SW2**3 - 64*(-39 + 28*CW2)*SW2**4 - 1536*SW2**5) +
                 LamE*(27 + 54*(-5 + 2*CW2)*SW2 - 36*(-31 + 20*CW2)*SW2**2 +
                 32*(-81 + 58*CW2)*SW2**3 - 128*(-27 + 16*CW2)*SW2**4 - 2304*SW2**5 +
                 Lamq*(27 + 54*(-5 + 2*CW2)*SW2 - 36*(-31 + 20*CW2)*SW2**2 +
                 32*(-85 + 62*CW2)*SW2**3 - 128*(-33 + 20*CW2)*SW2**4 + 256*(-15 + 8*CW2)*SW2**
                 5 + 2048*SW2**6))) - 8*CW2*Shat*SW2*(1 + LamE - 4*SW2 - 4*LamE*SW2 +
                 8*SW2**2)*(9 + Lamq*(9 - 24*SW2) - 24*SW2 + 32*SW2**2)*x))*C02(-Q2, MZ2, MZ2) -
                 576*CW2**2*(1 + LamE)*(1 + Lamq)*Shat**3*(8*CW2*MZ2*SW2 +
                 Q2*(3 + 2*(-5 + 4*CW2)*SW2 + 8*SW2**2))*x**3*D01(Shat*x, -Q2, MW2, MW2) +
                 16*(8*CW2*(MZ2 + Q2)*SW2*(8*MZ2*Shat**2*SW2**2*(-13 + 40*SW2 - 32*SW2**2 +
                 Lamq*(-5 + 8*SW2) + LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*x**2 +
                 4*MZ2**2*SW2**2*(-13 + 40*SW2 - 32*SW2**2 + Lamq*(-5 + 8*SW2) +
                 LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*(Q2 + Shat*x) +
                 Shat*x*(2*Q2**2*SW2**2*(-13 + 40*SW2 - 32*SW2**2 + Lamq*(-5 + 8*SW2) +
                 LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2))) -
                 4*Q2*Shat*SW2**2*(-13 + 40*SW2 - 32*SW2**2 + Lamq*(-5 + 8*SW2) +
                 LamE*(5 - 8*SW2 + Lamq*(13 - 40*SW2 + 32*SW2**2)))*x +
                 Shat**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*(-9 + 24*SW2 - 32*SW2**2 +
                 3*Lamq*(-3 + 8*SW2))*x**2)) +
                 Q2*(16*MZ2*Shat**2*SW2**3*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 +
                 Lamq*(19 - 60*SW2 + 48*SW2**2) + LamE*(-19 + 60*SW2 - 48*SW2**2 +
                 Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3)))*x**2 +
                 8*MZ2**2*SW2**3*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 +
                 Lamq*(19 - 60*SW2 + 48*SW2**2) + LamE*(-19 + 60*SW2 - 48*SW2**2 +
                 Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3)))*(Q2 + Shat*x) -
                 Shat*x*(-4*Q2**2*SW2**3*(35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 +
                 Lamq*(19 - 60*SW2 + 48*SW2**2) + LamE*(-19 + 60*SW2 - 48*SW2**2 +
                 Lamq*(-35 + 156*SW2 - 240*SW2**2 + 128*SW2**3))) + 8*Q2*Shat*SW2**3*
                 (35 - 156*SW2 + 240*SW2**2 - 128*SW2**3 + Lamq*(19 - 60*SW2 + 48*SW2**2) +
                 LamE*(-19 + 60*SW2 - 48*SW2**2 + Lamq*(-35 + 156*SW2 - 240*SW2**2 +
                 128*SW2**3)))*x + Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 +
                 12*LamE*SW2**2 - 16*SW2**3)*(27 - 108*SW2 + 144*SW2**2 - 128*SW2**3 +
                 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*x**2)))*D01(Shat*x, -Q2, MZ2, MZ2) +
                 (64*CW2*(MZ2 + Q2)*SW2*(2*MZ2**2*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4 +
                 Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) + LamE*(9 - 60*SW2 + 148*SW2**2 -
                 160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4)))*
                 (2*Q2 - Shat*x) - 4*MZ2*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4 +
                 Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3) + LamE*(9 - 60*SW2 + 148*SW2**2 -
                 160*SW2**3 + Lamq*(9 - 60*SW2 + 148*SW2**2 - 160*SW2**3 + 128*SW2**4)))*
                 (Q2 - Shat*x)*(-Q2 + Shat*x) + (-Q2 + Shat*x)*
                 (Q2**2*(-9 + 60*SW2 - 252*SW2**2 + 480*SW2**3 - 384*SW2**4 +
                 Lamq*(-9 + 60*SW2 - 188*SW2**2 + 224*SW2**3) + LamE*(-9 + 60*SW2 - 108*SW2**2 +
                 96*SW2**3 + Lamq*(-9 + 60*SW2 - 44*SW2**2 - 160*SW2**3 + 128*SW2**4))) -
                 2*Q2*Shat*(-9 + 60*SW2 - 252*SW2**2 + 480*SW2**3 - 384*SW2**4 +
                 Lamq*(-9 + 60*SW2 - 188*SW2**2 + 224*SW2**3) + LamE*(-9 + 60*SW2 - 108*SW2**2 +
                 96*SW2**3 + Lamq*(-9 + 60*SW2 - 44*SW2**2 - 160*SW2**3 + 128*SW2**4)))*x +
                 2*Shat**2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*(-9 + 24*SW2 - 32*SW2**2 +
                 3*Lamq*(-3 + 8*SW2))*x**2)) +
                 Q2*(16*MZ2**2*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5 +
                 1024*SW2**6 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                 1920*SW2**5) + LamE*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                 1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                 1920*SW2**5 + 1024*SW2**6)))*(2*Q2 - Shat*x) -
                 32*MZ2*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 - 1920*SW2**5 +
                 1024*SW2**6 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                 1920*SW2**5) + LamE*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                 1920*SW2**5 + Lamq*(27 - 270*SW2 + 1116*SW2**2 - 2440*SW2**3 + 2976*SW2**4 -
                 1920*SW2**5 + 1024*SW2**6)))*(Q2 - Shat*x)*(-Q2 + Shat*x) -
                 (-Q2 + Shat*x)*(Q2**2*(-8*Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 2744*SW2**3 -
                 3936*SW2**4 + 2688*SW2**5) + 24*(9 - 90*SW2 + 372*SW2**2 - 1000*SW2**3 +
                 1824*SW2**4 - 1920*SW2**5 + 1024*SW2**6) -
                 8*LamE*(3*(-9 + 90*SW2 - 372*SW2**2 + 712*SW2**3 - 672*SW2**4 + 384*SW2**5) +
                 Lamq*(-27 + 270*SW2 - 1116*SW2**2 + 1880*SW2**3 - 480*SW2**4 - 1920*SW2**5 +
                 1024*SW2**6))) + 16*Q2*Shat*(3*LamE*(-9 + 90*SW2 - 372*SW2**2 +
                 712*SW2**3 - 672*SW2**4 + 384*SW2**5) + Lamq*(-27 + 270*SW2 - 1116*SW2**2 +
                 2744*SW2**3 - 3936*SW2**4 + 2688*SW2**5) + LamE*Lamq*(-27 + 270*SW2 -
                 1116*SW2**2 + 1880*SW2**3 - 480*SW2**4 - 1920*SW2**5 + 1024*SW2**6) -
                 3*(9 - 90*SW2 + 372*SW2**2 - 1000*SW2**3 + 1824*SW2**4 - 1920*SW2**5 +
                 1024*SW2**6))*x + 16*Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 +
                 12*LamE*SW2**2 - 16*SW2**3)*(27 - 108*SW2 + 144*SW2**2 - 128*SW2**3 +
                 9*Lamq*(3 - 12*SW2 + 16*SW2**2))*x**2)))*D01(Q2 - Shat*x, -Q2, MZ2, MZ2)))/
                 (55296*CW2**3*Q2*(MZ2 + Q2)*Shat*SW2**3*x))

    return np.real(BoxNCpubar)

# Neutral Current positron - anti-down quark

def BoxNCpdbar(x, Q2, Lamq, MuR2):
    BoxNCepdbar = ((aem**3*(576*CW2**2*(1 + LamE)*(1 + Lamq)*Shat*(4*CW2*MZ2*SW2 +
                  Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*x*B0fin(-Q2, MW2, MW2, MuR2) +
                  16*(4*CW2*(MZ2 + Q2)*SW2*(8*Q2*SW2**2*(-5 + 4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 +
                  LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2))) +
                  Shat*(9 + Lamq*(9 - 12*SW2) - 12*SW2 + 8*SW2**2)*(1 + LamE - 4*SW2 - 4*LamE*SW2 +
                  8*SW2**2)*x) + Q2*(16*Q2*SW2**3*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 +
                  Lamq*(13 - 24*SW2 + 12*SW2**2) + LamE*(-13 + 24*SW2 - 12*SW2**2 +
                  2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))) +
                  Shat*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*
                  (27 - 54*SW2 + 36*SW2**2 - 16*SW2**3 + 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x))*B0fin(-Q2, MZ2, MZ2, MuR2) -
                  256*SW2**3*(2*CW2*(MZ2 + Q2)*(-5 + 4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 +
                  LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2))) +
                  Q2*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 + Lamq*(13 - 24*SW2 + 12*SW2**2) +
                  LamE*(-13 + 24*SW2 - 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))))*
                  (Q2 - Shat*x)*B0fin(Shat*x, 0, 0, MuR2) -
                  16*Shat*(4*CW2*(MZ2 + Q2)*SW2*(9*(1 + 4*CW2**2)*(1 + LamE)*(1 + Lamq) -
                  48*(1 + LamE)*(1 + Lamq)*SW2 + 88*(1 + LamE)*(1 + Lamq)*SW2**2 -
                  64*(1 + LamE)*(1 + Lamq)*SW2**3 + 32*(1 + LamE*Lamq)*SW2**4) +
                  Q2*(27*(1 + 4*CW2**2)*(1 + LamE)*(1 + Lamq) - 72*(3 + 4*CW2**2)*(1 + LamE)*(1 + Lamq)*
                  SW2 + 36*(19 + 4*CW2**2)*(1 + LamE)*(1 + Lamq)*SW2**2 -
                  1088*(1 + LamE)*(1 + Lamq)*SW2**3 + 912*(1 + LamE)*(1 + Lamq)*SW2**4 -
                  384*(1 + LamE)*(1 + Lamq)*SW2**5 + 128*(1 + LamE*Lamq)*SW2**6))*x*
                  B0fin(Q2 - Shat*x, 0, 0, MuR2) + 256*Shat*SW2**3*
                  (2*CW2*(MZ2 + Q2)*(-5 + 4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 +
                  LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2))) +
                  Q2*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 + Lamq*(13 - 24*SW2 + 12*SW2**2) +
                  LamE*(-13 + 24*SW2 - 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))))*x*
                  (2*MZ2 - Q2 + 2*Shat*x)*C01(Shat*x, MZ2) + 576*CW2**2*(1 + LamE)*(1 + Lamq)*
                  (4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*(2*MW2 + Q2 - 2*Shat*x)*
                  (Q2 - Shat*x)*C01(Q2 - Shat*x, MW2) +
                  16*(4*CW2*MZ2*SW2*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4 +
                  Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) + LamE*(9 - 48*SW2 + 88*SW2**2 -
                  64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4))) +
                  Q2*(27 - 216*SW2 + 36*CW2*SW2 + 684*SW2**2 - 192*CW2*SW2**2 - 1088*SW2**3 +
                  352*CW2*SW2**3 + 912*SW2**4 - 256*CW2*SW2**4 - 384*SW2**5 + 128*CW2*SW2**5 +
                  128*SW2**6 - Lamq*(-3 + 8*SW2)*(9 + 12*(-4 + CW2)*SW2 - 4*(-25 + 8*CW2)*SW2**2 +
                  32*(-3 + CW2)*SW2**3 + 48*SW2**4) +
                  LamE*(-((-3 + 8*SW2)*(9 + 12*(-4 + CW2)*SW2 - 4*(-25 + 8*CW2)*SW2**2 +
                  32*(-3 + CW2)*SW2**3 + 48*SW2**4)) + Lamq*(27 + 36*(-6 + CW2)*SW2 +
                  (684 - 192*CW2)*SW2**2 + 32*(-34 + 11*CW2)*SW2**3 + (912 - 256*CW2)*SW2**4 +
                  128*(-3 + CW2)*SW2**5 + 128*SW2**6))))*(2*MZ2 + Q2 - 2*Shat*x)*(Q2 - Shat*x)*
                  C01(Q2 - Shat*x, MZ2) - 576*CW2**2*(1 + LamE)*(1 + Lamq)*
                  (4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*
                  (2*MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2)*C02(-Q2, MW2, MW2) -
                  16*Q2*(8*CW2*MZ2**2*SW2*(1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*LamE*SW2**2)*
                  (9 - 12*SW2 + Lamq*(9 - 12*SW2 + 8*SW2**2)) +
                  Q2*(27 - 216*SW2 + 36*CW2*SW2 + 684*SW2**2 - 192*CW2*SW2**2 - 1312*SW2**3 +
                  512*CW2*SW2**3 + 1392*SW2**4 - 512*CW2*SW2**4 - 768*SW2**5 + 256*CW2*SW2**5 +
                  256*SW2**6 - 3*Lamq*(-9 - 12*(-6 + CW2)*SW2 + 4*(-57 + 16*CW2)*SW2**2 +
                  (432 - 160*CW2)*SW2**3 + 16*(-27 + 8*CW2)*SW2**4 + 192*SW2**5) +
                  LamE*(27 + 36*(-6 + CW2)*SW2 + (684 - 192*CW2)*SW2**2 + 16*(-55 + 14*CW2)*SW2**3 -
                  16*(-33 + 8*CW2)*SW2**4 - 192*SW2**5 + 3*Lamq*(9 + 12*(-6 + CW2)*SW2 +
                  (228 - 64*CW2)*SW2**2 + 32*(-9 + 2*CW2)*SW2**3 + 144*SW2**4)))*(Q2 - 2*Shat*x) +
                  2*MZ2*(Q2*(27 - 216*SW2 + 54*CW2*SW2 + 684*SW2**2 - 288*CW2*SW2**2 - 864*SW2**3 +
                  448*CW2*SW2**3 + 432*SW2**4 - 256*CW2*SW2**4 + 128*CW2*SW2**5 +
                  Lamq*(27 + 54*(-4 + CW2)*SW2 - 36*(-19 + 8*CW2)*SW2**2 + 16*(-55 + 29*CW2)*
                  SW2**3 + (528 - 320*CW2)*SW2**4 - 192*SW2**5) +
                  LamE*(27 + 54*(-4 + CW2)*SW2 - 36*(-19 + 8*CW2)*SW2**2 + 16*(-81 + 37*CW2)*
                  SW2**3 - 16*(-81 + 28*CW2)*SW2**4 - 576*SW2**5 +
                  Lamq*(27 + 54*(-4 + CW2)*SW2 - 36*(-19 + 8*CW2)*SW2**2 + 32*(-41 + 19*CW2)*
                  SW2**3 - 16*(-87 + 32*CW2)*SW2**4 + 256*(-3 + CW2)*SW2**5 + 256*SW2**6))) -
                  4*CW2*Shat*SW2*(9 + Lamq*(9 - 12*SW2) - 12*SW2 + 8*SW2**2)*
                  (1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*x))*C02(-Q2, MZ2, MZ2) +
                  16*(4*CW2*(MZ2 + Q2)*SW2*(16*MZ2*Shat**2*SW2**2*(-5 + 4*Lamq*(-1 + SW2) + 8*SW2 -
                  4*SW2**2 + LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2)))*x**2 +
                  8*MZ2**2*SW2**2*(-5 + 4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 +
                  LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2)))*(Q2 + Shat*x) -
                  Shat*x*(-4*Q2**2*SW2**2*(-5 + 4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 +
                  LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2))) + 8*Q2*Shat*SW2**2*
                  (-5 + 4*Lamq*(-1 + SW2) + 8*SW2 - 4*SW2**2 +
                  LamE*(4 - 4*SW2 + Lamq*(5 - 8*SW2 + 4*SW2**2)))*x +
                  Shat**2*(9 + Lamq*(9 - 12*SW2) - 12*SW2 + 8*SW2**2)*(1 + LamE - 4*SW2 -
                  4*LamE*SW2 + 8*SW2**2)*x**2)) +
                  Q2*(32*MZ2*Shat**2*SW2**3*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 +
                  Lamq*(13 - 24*SW2 + 12*SW2**2) + LamE*(-13 + 24*SW2 - 12*SW2**2 +
                  2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*x**2 +
                  16*MZ2**2*SW2**3*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 +
                  Lamq*(13 - 24*SW2 + 12*SW2**2) + LamE*(-13 + 24*SW2 - 12*SW2**2 +
                  2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*(Q2 + Shat*x) +
                  Shat*x*(8*Q2**2*SW2**3*(14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 +
                  Lamq*(13 - 24*SW2 + 12*SW2**2) + LamE*(-13 + 24*SW2 - 12*SW2**2 +
                  2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3))) - 16*Q2*Shat*SW2**3*
                  (14 - 30*SW2 + 24*SW2**2 - 8*SW2**3 + Lamq*(13 - 24*SW2 + 12*SW2**2) +
                  LamE*(-13 + 24*SW2 - 12*SW2**2 + 2*Lamq*(-7 + 15*SW2 - 12*SW2**2 + 4*SW2**3)))*
                  x + Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 + 12*SW2**2 + 12*LamE*SW2**2 -
                  16*SW2**3)*(-27 + 54*SW2 - 36*SW2**2 + 16*SW2**3 - 9*Lamq*(3 - 6*SW2 + 4*SW2**2))*
                  x**2)))*D01(Shat*x, -Q2, MZ2, MZ2) + 288*CW2**2*(1 + LamE)*(1 + Lamq)*
                  (4*CW2*MZ2*SW2 + Q2*(3 + 4*(-2 + CW2)*SW2 + 4*SW2**2))*
                  (Q2**3 - 3*Q2**2*Shat*x + 4*Q2*Shat**2*x**2 - 2*Shat**3*x**3 + MW2**2*(4*Q2 - 2*Shat*x) +
                  4*MW2*(Q2 - Shat*x)**2)*D01(Q2 - Shat*x, -Q2, MW2, MW2) +
                  (4*CW2*(MZ2 + Q2)*SW2*(16*MZ2**2*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4 +
                  Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) + LamE*(9 - 48*SW2 + 88*SW2**2 -
                  64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4)))*
                  (2*Q2 - Shat*x) - 32*MZ2*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4 +
                  Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3) + LamE*(9 - 48*SW2 + 88*SW2**2 -
                  64*SW2**3 + Lamq*(9 - 48*SW2 + 88*SW2**2 - 64*SW2**3 + 32*SW2**4)))*(Q2 - Shat*x)*
                  (-Q2 + Shat*x) - (-Q2 + Shat*x)*
                  (-8*Q2**2*(Lamq*(-9 + 48*SW2 - 152*SW2**2 + 128*SW2**3) -
                  3*(3 - 16*SW2 + 56*SW2**2 - 64*SW2**3 + 32*SW2**4) +
                  LamE*(-9 + 48*SW2 - 24*SW2**2 + Lamq*(-9 + 48*SW2 - 8*SW2**2 - 64*SW2**3 + 32*
                  SW2**4))) + 16*Q2*Shat*(Lamq*(-9 + 48*SW2 - 152*SW2**2 + 128*SW2**3) -
                  3*(3 - 16*SW2 + 56*SW2**2 - 64*SW2**3 + 32*SW2**4) +
                  LamE*(-9 + 48*SW2 - 24*SW2**2 + Lamq*(-9 + 48*SW2 - 8*SW2**2 - 64*SW2**3 + 32*
                  SW2**4)))*x + 16*Shat**2*(9 + Lamq*(9 - 12*SW2) - 12*SW2 + 8*SW2**2)*
                  (1 + LamE - 4*SW2 - 4*LamE*SW2 + 8*SW2**2)*x**2)) +
                  Q2*(16*MZ2**2*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 +
                  128*SW2**6 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                  384*SW2**5) + LamE*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                  384*SW2**5 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                  384*SW2**5 + 128*SW2**6)))*(2*Q2 - Shat*x) -
                  32*MZ2*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 - 384*SW2**5 +
                  128*SW2**6 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                  384*SW2**5) + LamE*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                  384*SW2**5 + Lamq*(27 - 216*SW2 + 684*SW2**2 - 1088*SW2**3 + 912*SW2**4 -
                  384*SW2**5 + 128*SW2**6)))*(Q2 - Shat*x)*(-Q2 + Shat*x) -
                  (-Q2 + Shat*x)*(-8*Q2**2*(-3*LamE*(9 - 72*SW2 + 228*SW2**2 - 224*SW2**3 +
                  48*SW2**4) + Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1504*SW2**3 - 1680*SW2**4 +
                  768*SW2**5) + LamE*Lamq*(-27 + 216*SW2 - 684*SW2**2 + 640*SW2**3 + 48*SW2**4 -
                  384*SW2**5 + 128*SW2**6) - 3*(9 - 72*SW2 + 228*SW2**2 - 512*SW2**3 +
                  624*SW2**4 - 384*SW2**5 + 128*SW2**6)) + 16*Q2*Shat*
                  (-3*LamE*(9 - 72*SW2 + 228*SW2**2 - 224*SW2**3 + 48*SW2**4) +
                  Lamq*(-27 + 216*SW2 - 684*SW2**2 + 1504*SW2**3 - 1680*SW2**4 + 768*SW2**5) +
                  LamE*Lamq*(-27 + 216*SW2 - 684*SW2**2 + 640*SW2**3 + 48*SW2**4 - 384*SW2**5 +
                  128*SW2**6) - 3*(9 - 72*SW2 + 228*SW2**2 - 512*SW2**3 + 624*SW2**4 -
                  384*SW2**5 + 128*SW2**6))*x + 16*Shat**2*(1 + LamE - 6*SW2 - 6*LamE*SW2 +
                  12*SW2**2 + 12*LamE*SW2**2 - 16*SW2**3)*(27 - 54*SW2 + 36*SW2**2 - 16*SW2**3 +
                  9*Lamq*(3 - 6*SW2 + 4*SW2**2))*x**2)))*D01(Q2 - Shat*x, -Q2, MZ2, MZ2)))/(55296*CW2**3*Q2*(MZ2 + Q2)*Shat*SW2**3*x))

    return np.real(BoxNCpdbar)

# Charged Current electron - up quark

def BoxCCeu(x, Q2, Lamq, MuR2):
    BoxCC = ((aem**3*(1 - LamE)*(1 - Lamq)*(-4*CW2*Pi**2*Q2*SW2*(2*MW2**2 + 2*Q2**2 - 4*Q2*Shat*x -
            9*Shat**2*x**2 + 4*MW2*(Q2 - Shat*x)) + 48*CW2*Q2*(MW2 + Q2)*Shat*SW2*x*
            B0fin(-Q2, 0, MW2, MuR2) + 24*Q2*(MW2 + Q2)*Shat*(3 - 6*SW2 + 2*SW2**2)*x*
            B0fin(-Q2, MW2, MZ2, MuR2) - 24*Q2*(MW2 + Q2)*Shat*(3 + 2*(-3 + CW2)*SW2 + 2*SW2**2)*
            x*B0fin(Q2 - Shat*x, 0, 0, MuR2) + 12*Q2*(MW2 + Q2)*(Q2 - Shat*x)*
            (MZ2*(3 - 6*SW2 + 2*SW2**2) + MW2*(3 + 2*(-3 + CW2)*SW2 + 2*SW2**2) +
            (3 + 2*(-3 + CW2)*SW2 + 2*SW2**2)*(Q2 - 2*Shat*x))*C01(Q2 - Shat*x, MW2) +
            12*Q2*(MW2 + Q2)*(3 - 6*SW2 + 2*SW2**2)*(MW2 + MZ2 + Q2 - 2*Shat*x)*(Q2 - Shat*x)*
            C01(Q2 - Shat*x, MZ2) - 3*Q2*(MW2 + Q2)*
            (8*Q2*(MW2 + MZ2 + Q2)*(3 - 6*SW2 + 2*SW2**2) - 16*Q2*Shat*(3 - 6*SW2 + 2*SW2**2)*x +
            96*Shat**2*(-1 + SW2)**2*x**2)*C02(-Q2, MW2, MZ2) + 24*Q2*(MW2 + Q2)*Shat**3*
            (3 - 6*SW2 + 4*SW2**2)*x**3*D01(Shat*x, -Q2, MW2, MZ2) +
            12*Q2*(MW2 + Q2)*(3 - 6*SW2 + 2*SW2**2)*(MW2**2*(Q2 - Shat*x) +
            (Q2 - Shat*x)*(MZ2**2 + Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2 + 2*MZ2*(Q2 - Shat*x)) +
            2*MW2*(MZ2*Q2 + (Q2 - Shat*x)**2))*D01(Q2 - Shat*x, -Q2, MW2, MZ2) +
            48*CW2*(MW2 + Q2)*SW2*(MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 6*Shat**2*x**2)*
            cm.log((MW2 + Q2)/MW2)**2 - 48*CW2*Q2**3*SW2*cm.log((Shat*x)/MuR2) -
            48*CW2*Q2*Shat**2*SW2*x**2*cm.log((Shat*x)/MuR2)**2 + 48*CW2*Q2*Shat**2*SW2*x**2*
            cm.log((Shat*x)/MW2)**2 - 24*CW2*Q2**3*SW2*cm.log((Q2 - Shat*x)/MuR2) -
            24*CW2*Q2*Shat**2*SW2*x**2*cm.log((Q2 - Shat*x)/MuR2)**2 + 48*CW2*SW2*cm.log((MW2 + Q2)/MW2)*
            (3*MW2*Q2**2 + (MW2 + Q2)*(MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 6*Shat**2*x**2)*
             cm.log(MW2/MuR2) - 4*Q2*Shat**2*x**2*cm.log((Shat*x)/MuR2) -
            Q2*(MW2**2 + Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2 + 2*MW2*(Q2 - Shat*x))*
             cm.log((Q2 - Shat*x)/MuR2)) + 12*CW2*Q2*SW2*(MW2**2 + Q2**2 - 2*Q2*Shat*x +
            2*Shat**2*x**2 + 2*MW2*(Q2 - Shat*x))*cm.log((Q2 - Shat*x)/MW2)**2 +
            48*CW2*(MW2 + Q2)*SW2*(MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 6*Shat**2*x**2)*
            li2(-(Q2/MW2)) + 96*CW2*Q2*SW2*(MW2**2 + Q2**2 - 2*Q2*Shat*x + 6*Shat**2*x**2 +
            2*MW2*(Q2 - Shat*x))*li2(Q2/(MW2 + Q2)) + 96*CW2*Q2*Shat**2*SW2*x**2*
            li2(1 + MW2/(Shat*x)) + 24*CW2*Q2*SW2*(MW2**2 + Q2**2 - 2*Q2*Shat*x +
            2*Shat**2*x**2 + 2*MW2*(Q2 - Shat*x))*li2((MW2 + Q2 - Shat*x)/(Q2 - Shat*x))))/(576*CW2*Q2*(MW2 + Q2)**2*Shat*SW2**3*x))

    return np.real(BoxCC)

# Charged Current electron - anti-down quark

def BoxCCedbar(x, Q2, Lamq, MuR2):
    BoxCC = ((aem**3*(1 - LamE)*(1 + Lamq)*(4*CW2*Pi**2*Q2*SW2*(-2*MW2**2 + 11*Q2**2 - 4*MW2*Shat*x -
            22*Q2*Shat*x + 9*Shat**2*x**2) + 48*CW2*Q2*(MW2 + Q2)*SW2*(Q2 - Shat*x)*
            B0fin(-Q2, 0, MW2, MuR2) + 24*Q2*(MW2 + Q2)*(3 - 6*SW2 + 2*SW2**2)*(Q2 - Shat*x)*
            B0fin(-Q2, MW2, MZ2, MuR2) - 24*Q2*(MW2 + Q2)*(3 + 2*(-3 + CW2)*SW2 + 2*SW2**2)*
            (Q2 - Shat*x)*B0fin(Shat*x, 0, 0, MuR2) + 12*Q2*(MW2 + Q2)*Shat*x*
            (MZ2*(3 - 6*SW2 + 2*SW2**2) + MW2*(3 + 2*(-3 + CW2)*SW2 + 2*SW2**2) -
            (3 + 2*(-3 + CW2)*SW2 + 2*SW2**2)*(Q2 - 2*Shat*x))*C01(Shat*x, MW2) +
            12*Q2*(MW2 + Q2)*Shat*(3 - 6*SW2 + 2*SW2**2)*x*(MW2 + MZ2 - Q2 + 2*Shat*x)*
            C01(Shat*x, MZ2) - 3*Q2*(MW2 + Q2)*
            (8*Q2*(MW2*(3 - 6*SW2 + 2*SW2**2) + MZ2*(3 - 6*SW2 + 2*SW2**2) +
            Q2*(9 - 18*SW2 + 10*SW2**2)) - 16*Q2*Shat*(9 - 18*SW2 + 10*SW2**2)*x +
            96*Shat**2*(-1 + SW2)**2*x**2)*C02(-Q2, MW2, MZ2) +
            12*Q2*(MW2 + Q2)*(3 - 6*SW2 + 2*SW2**2)*(MW2**2*Shat*x + 2*MW2*(MZ2*Q2 + Shat**2*x**2) +
            Shat*x*(MZ2**2 + Q2**2 + 2*MZ2*Shat*x - 2*Q2*Shat*x + 2*Shat**2*x**2))*
            D01(Shat*x, -Q2, MW2, MZ2) + 24*Q2*(MW2 + Q2)*(3 - 6*SW2 + 4*SW2**2)*(Q2 - Shat*x)**3*
            D01(Q2 - Shat*x, -Q2, MW2, MZ2) + 48*CW2*(MW2 + Q2)*SW2*
            (MW2*Q2 + 5*Q2**2 - 10*Q2*Shat*x + 6*Shat**2*x**2)*cm.log((MW2 + Q2)/MW2)**2 -
            24*CW2*Q2**3*SW2*cm.log((Shat*x)/MuR2) - 24*CW2*Q2*SW2*(Q2 - Shat*x)**2*
            cm.log((Shat*x)/MuR2)**2 + 12*CW2*Q2*SW2*(MW2**2 + Q2**2 + 2*MW2*Shat*x - 2*Q2*Shat*x +
            2*Shat**2*x**2)*cm.log((Shat*x)/MW2)**2 - 48*CW2*Q2**3*SW2*cm.log((Q2 - Shat*x)/MuR2) -
            48*CW2*Q2*SW2*(Q2 - Shat*x)**2*cm.log((Q2 - Shat*x)/MuR2)**2 +
            48*CW2*SW2*cm.log((MW2 + Q2)/MW2)*(3*MW2*Q2**2 +
            (MW2 + Q2)*(MW2*Q2 + 5*Q2**2 - 10*Q2*Shat*x + 6*Shat**2*x**2)*cm.log(MW2/MuR2) -
            Q2*(MW2**2 + Q2**2 + 2*MW2*Shat*x - 2*Q2*Shat*x + 2*Shat**2*x**2)*cm.log((Shat*x)/MuR2) -
            4*Q2*(Q2 - Shat*x)**2*cm.log((Q2 - Shat*x)/MuR2)) + 48*CW2*Q2*SW2*(Q2 - Shat*x)**2*
            cm.log((Q2 - Shat*x)/MW2)**2 + 48*CW2*(MW2 + Q2)*SW2*(MW2*Q2 + 5*Q2**2 - 10*Q2*Shat*x +
            6*Shat**2*x**2)*li2(-(Q2/MW2)) + 96*CW2*Q2*SW2*
            (MW2**2 + 5*Q2**2 + 2*MW2*Shat*x - 10*Q2*Shat*x + 6*Shat**2*x**2)*
            li2(Q2/(MW2 + Q2)) + 24*CW2*Q2*SW2*(MW2**2 + Q2**2 + 2*MW2*Shat*x -
            2*Q2*Shat*x + 2*Shat**2*x**2)*li2(1 + MW2/(Shat*x)) +
            96*CW2*Q2*SW2*(Q2 - Shat*x)**2*li2((MW2 + Q2 - Shat*x)/(Q2 - Shat*x))))/(576*CW2*Q2*(MW2 + Q2)**2*Shat*SW2**3*x))

    return np.real(BoxCC)

# Charged Current positron - anti-up quark

def BoxCCpubar(x, Q2, Lamq, MuR2):
    BoxCC = ((aem**3*(1 + LamE)*(1 + Lamq)*
             (-(CW2*Pi**2*Q2*SW2*(2*MW2**2 + 2*Q2**2 - 4*Q2*Shat*x - 9*Shat**2*x**2 +
             4*MW2*(Q2 - Shat*x))) + 12*CW2*Q2*(MW2 + Q2)*Shat*SW2*x*B0fin(-Q2, 0, MW2, MuR2) +
             6*Q2*(MW2 + Q2)*Shat*(3 - 6*SW2 + 2*SW2**2)*x*B0fin(-Q2, MW2, MZ2, MuR2) -
             6*Q2*(MW2 + Q2)*Shat*(3 + 2*(-3 + CW2)*SW2 + 2*SW2**2)*x*
             B0fin(Q2 - Shat*x, 0, 0, MuR2) + 3*Q2*(MW2 + Q2)*(Q2 - Shat*x)*
             (MZ2*(3 - 6*SW2 + 2*SW2**2) + MW2*(3 + 2*(-3 + CW2)*SW2 + 2*SW2**2) +
             (3 + 2*(-3 + CW2)*SW2 + 2*SW2**2)*(Q2 - 2*Shat*x))*C01(Q2 - Shat*x, MW2) +
             3*Q2*(MW2 + Q2)*(3 - 6*SW2 + 2*SW2**2)*(MW2 + MZ2 + Q2 - 2*Shat*x)*(Q2 - Shat*x)*
             C01(Q2 - Shat*x, MZ2) - 6*Q2*(MW2 + Q2)*(Q2*(MW2 + MZ2 + Q2)*(3 - 6*SW2 + 2*SW2**2) -
             2*Q2*Shat*(3 - 6*SW2 + 2*SW2**2)*x + 12*Shat**2*(-1 + SW2)**2*x**2)*
             C02(-Q2, MW2, MZ2) + 6*Q2*(MW2 + Q2)*Shat**3*(3 - 6*SW2 + 4*SW2**2)*x**3*
             D01(Shat*x, -Q2, MW2, MZ2) + 3*Q2*(MW2 + Q2)*(3 - 6*SW2 + 2*SW2**2)*
             (MW2**2*(Q2 - Shat*x) + (Q2 - Shat*x)*(MZ2**2 + Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2 +
             2*MZ2*(Q2 - Shat*x)) + 2*MW2*(MZ2*Q2 + (Q2 - Shat*x)**2))*
             D01(Q2 - Shat*x, -Q2, MW2, MZ2) + 12*CW2*(MW2 + Q2)*SW2*
             (MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 6*Shat**2*x**2)*cm.log((MW2 + Q2)/MW2)**2 -
             12*CW2*Q2**3*SW2*cm.log((Shat*x)/MuR2) - 12*CW2*Q2*Shat**2*SW2*x**2*cm.log((Shat*x)/MuR2)**2 +
             12*CW2*Q2*Shat**2*SW2*x**2*cm.log((Shat*x)/MW2)**2 -
             6*CW2*Q2**3*SW2*cm.log((Q2 - Shat*x)/MuR2) - 6*CW2*Q2*Shat**2*SW2*x**2*
             cm.log((Q2 - Shat*x)/MuR2)**2 + 12*CW2*SW2*cm.log((MW2 + Q2)/MW2)*
             (3*MW2*Q2**2 + (MW2 + Q2)*(MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 6*Shat**2*x**2)*
             cm.log(MW2/MuR2) - 4*Q2*Shat**2*x**2*cm.log((Shat*x)/MuR2) -
             Q2*(MW2**2 + Q2**2 - 2*Q2*Shat*x + 2*Shat**2*x**2 + 2*MW2*(Q2 - Shat*x))*
             cm.log((Q2 - Shat*x)/MuR2)) + 3*CW2*Q2*SW2*(MW2**2 + Q2**2 - 2*Q2*Shat*x +
             2*Shat**2*x**2 + 2*MW2*(Q2 - Shat*x))*cm.log((Q2 - Shat*x)/MW2)**2 +
             12*CW2*(MW2 + Q2)*SW2*(MW2*Q2 + Q2**2 - 2*Q2*Shat*x + 6*Shat**2*x**2)*
             li2(-(Q2/MW2)) + 24*CW2*Q2*SW2*(MW2**2 + Q2**2 - 2*Q2*Shat*x + 6*Shat**2*x**2 +
             2*MW2*(Q2 - Shat*x))*li2(Q2/(MW2 + Q2)) + 24*CW2*Q2*Shat**2*SW2*x**2*
             li2(1 + MW2/(Shat*x)) + 6*CW2*Q2*SW2*(MW2**2 + Q2**2 - 2*Q2*Shat*x +
             2*Shat**2*x**2 + 2*MW2*(Q2 - Shat*x))*li2((MW2 + Q2 - Shat*x)/(Q2 - Shat*x))))/(144*CW2*Q2*(MW2 + Q2)**2*Shat*SW2**3*x))

    return np.real(BoxCC)

# Charged Current positron - down quark

def BoxCCpd(x, Q2, Lamq, MuR2):
    BoxCC = ((aem**3*(1 + LamE)*(1 - Lamq)*(CW2*Pi**2*Q2*SW2*(-2*MW2**2 + 11*Q2**2 - 4*MW2*Shat*x -
            22*Q2*Shat*x + 9*Shat**2*x**2) + 12*CW2*Q2*(MW2 + Q2)*SW2*(Q2 - Shat*x)*
            B0fin(-Q2, 0, MW2, MuR2))+ 6*Q2*(MW2 + Q2)*(3 - 6*SW2 + 2*SW2**2)*(Q2 - Shat*x)*
            B0fin(-Q2, MW2, MZ2, MuR2) - 6*Q2*(MW2 + Q2)*(3 + 2*(-3 + CW2)*SW2 + 2*SW2**2)*
            (Q2 - Shat*x)*B0fin(Shat*x, 0, 0, MuR2) + 3*Q2*(MW2 + Q2)*Shat*x*
            (MZ2*(3 - 6*SW2 + 2*SW2**2) + MW2*(3 + 2*(-3 + CW2)*SW2 + 2*SW2**2) -
            (3 + 2*(-3 + CW2)*SW2 + 2*SW2**2)*(Q2 - 2*Shat*x))*C01(Shat*x, MW2) +
            3*Q2*(MW2 + Q2)*Shat*(3 - 6*SW2 + 2*SW2**2)*x*(MW2 + MZ2 - Q2 + 2*Shat*x)*
            C01(Shat*x, MZ2) - 6*Q2*(MW2 + Q2)*
            (Q2*(MW2*(3 - 6*SW2 + 2*SW2**2) + MZ2*(3 - 6*SW2 + 2*SW2**2) +
            Q2*(9 - 18*SW2 + 10*SW2**2)) - 2*Q2*Shat*(9 - 18*SW2 + 10*SW2**2)*x +
            12*Shat**2*(-1 + SW2)**2*x**2)*C02(-Q2, MW2, MZ2) +
            3*Q2*(MW2 + Q2)*(3 - 6*SW2 + 2*SW2**2)*(MW2**2*Shat*x + 2*MW2*(MZ2*Q2 + Shat**2*x**2) +
            Shat*x*(MZ2**2 + Q2**2 + 2*MZ2*Shat*x - 2*Q2*Shat*x + 2*Shat**2*x**2))*
            D01(Shat*x, -Q2, MW2, MZ2) + 6*Q2*(MW2 + Q2)*(3 - 6*SW2 + 4*SW2**2)*(Q2 - Shat*x)**3*
            D01(Q2 - Shat*x, -Q2, MW2, MZ2) + 12*CW2*(MW2 + Q2)*SW2*
            (MW2*Q2 + 5*Q2**2 - 10*Q2*Shat*x + 6*Shat**2*x**2)*cm.log((MW2 + Q2)/MW2)**2 -
            6*CW2*Q2**3*SW2*cm.log((Shat*x)/MuR2) - 6*CW2*Q2*SW2*(Q2 - Shat*x)**2*
            cm.log((Shat*x)/MuR2)**2 + 3*CW2*Q2*SW2*(MW2**2 + Q2**2 + 2*MW2*Shat*x - 2*Q2*Shat*x +
            2*Shat**2*x**2)*cm.log((Shat*x)/MW2)**2 - 12*CW2*Q2**3*SW2*cm.log((Q2 - Shat*x)/MuR2) -
            12*CW2*Q2*SW2*(Q2 - Shat*x)**2*cm.log((Q2 - Shat*x)/MuR2)**2 +
            12*CW2*SW2*cm.log((MW2 + Q2)/MW2)*(3*MW2*Q2**2 +
            (MW2 + Q2)*(MW2*Q2 + 5*Q2**2 - 10*Q2*Shat*x + 6*Shat**2*x**2)*cm.log(MW2/MuR2) -
            Q2*(MW2**2 + Q2**2 + 2*MW2*Shat*x - 2*Q2*Shat*x + 2*Shat**2*x**2)*cm.log((Shat*x)/MuR2) -
            4*Q2*(Q2 - Shat*x)**2*cm.log((Q2 - Shat*x)/MuR2)) + 12*CW2*Q2*SW2*(Q2 - Shat*x)**2*
            cm.log((Q2 - Shat*x)/MW2)**2 + 12*CW2*(MW2 + Q2)*SW2*(MW2*Q2 + 5*Q2**2 - 10*Q2*Shat*x +
            6*Shat**2*x**2)*li2(-(Q2/MW2)) + 24*CW2*Q2*SW2*
            (MW2**2 + 5*Q2**2 + 2*MW2*Shat*x - 10*Q2*Shat*x + 6*Shat**2*x**2)*
            li2(Q2/(MW2 + Q2)) + 6*CW2*Q2*SW2*(MW2**2 + Q2**2 + 2*MW2*Shat*x -
            2*Q2*Shat*x + 2*Shat**2*x**2)*li2(1 + MW2/(Shat*x)) +
            24*CW2*Q2*SW2*(Q2 - Shat*x)**2*li2((MW2 + Q2 - Shat*x)/(Q2 - Shat*x)))/(144*CW2*Q2*(MW2 + Q2)**2*Shat*SW2**3*x))

    return np.real(BoxCC)

#Summarize neutral current box contributions

def BoxNC(x, Q2, Lamq, MuR2, k):
    if k ==0:
        return 0
    if LepType == 1:
        if k in [1,3,5]:
            return BoxNCed(x, Q2, Lamq, MuR2)
        if k in [2,4]:
            return BoxNCeu(x, Q2, Lamq, MuR2)
        if k in [-1,-3,-5]:
            return BoxNCedbar(x, Q2, Lamq, MuR2)
        if k in [-2,-4]:
            return BoxNCeubar(x, Q2, Lamq, MuR2)

    if LepType == -1:
        if k in [1,3,5]:
            return BoxNCpd(x, Q2, Lamq, MuR2)
        if k in [2,4]:
            return BoxNCpu(x, Q2, Lamq, MuR2)
        if k in [-1,-3,-5]:
            return BoxNCpdbar(x, Q2, Lamq, MuR2)
        if k in [-2,-4]:
            return BoxNCpubar(x, Q2, Lamq, MuR2)

#Summarize charged current box contributions

def BoxCC(x, Q2, Lamq, MuR2, k):
    if k ==0:
        return 0
    if LepType == 1:
        if k in [1,3,5]:
            return 0
        if k in [2,4]:
            return BoxCCeu(x, Q2, Lamq, MuR2)
        if k in [-1,-3,-5]:
            return BoxCCedbar(x, Q2, Lamq, MuR2)
        if k in [-2,-4]:
            return 0

    if LepType == -1:
        if k in [1,3,5]:
            return BoxCCpd(x, Q2, Lamq, MuR2)
        if k in [2,4]:
            return 0
        if k in [-1,-3,-5]:
            return 0
        if k in [-2,-4]:
            return BoxCCpubar(x, Q2, Lamq, MuR2)

#Total Box contributions, flavor summed. NLO = 0 returns 0

def dsigmaBox(x, Q2, MuR2, polstate, NLO):
    Boxtot = 0
    i = -Nf
    if NLO == 0:
        return 0
    if NLO == 1:
        if polstate == 0:
            if currid == 1:
                while i <= Nf:
                    Boxtot = Boxtot + BoxNC(x, Q2, 0, MuR2, i)*PDFunpol(i, x, MuR2)
                    i = i+1
                return Boxtot
            elif currid == 0:
                while i <= Nf:
                    Boxtot = Boxtot + BoxCC(x, Q2, 0, MuR2, i)*PDFunpol(i, x, MuR2)
                    i = i+1
                return Boxtot

        if polstate == 1:
            if currid == 1:
                while i <= Nf:
                    Boxtot = Boxtot + (BoxNC(x, Q2, -1, MuR2, i)-BoxNC(x, Q2, 1, MuR2, i))*PDFpol(i, x, MuR2)
                    i = i+1
                return Boxtot
            elif currid == 0:
                while i <= Nf:
                    Boxtot = Boxtot + (BoxCC(x, Q2, -1, MuR2, i)-BoxCC(x, Q2, 1, MuR2, i))*PDFpol(i, x, MuR2)
                    i = i+1
                return Boxtot
